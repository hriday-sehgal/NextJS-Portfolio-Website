{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/lib/supabaseAdmin.ts"],"sourcesContent":["// lib/supabaseAdmin.ts\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseAdminUrl = process.env.SUPABASE_URL;\r\nconst supabaseAdminKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nif (!supabaseAdminUrl || !supabaseAdminKey) {\r\n  throw new Error(\"Supabase Admin URL and Key must be provided\");\r\n}\r\n\r\nexport const supabaseAdmin = createClient(supabaseAdminUrl, supabaseAdminKey);\r\n\r\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;AACvB;;AAEA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AACjD,MAAM,mBAAmB,QAAQ,GAAG,CAAC,yBAAyB;AAE9D,IAAI,CAAC,oBAAoB,CAAC,kBAAkB;IAC1C,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,gBAAgB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,kBAAkB"}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/lib/email.ts"],"sourcesContent":["// lib/email.ts\r\nimport { Resend } from 'resend';\r\n\r\nconst resend = new Resend(process.env.RESEND_API_KEY);\r\n\r\ninterface SendConfirmationEmailProps {\r\n    email: string;\r\n    name?: string; // Name is optional\r\n}\r\n\r\nexport async function sendSubscriberConfirmationEmail({ email, name }: SendConfirmationEmailProps) {\r\n    try {\r\n        const data = await resend.emails.send({\r\n            from: process.env.RESEND_FROM_EMAIL!,  // Your \"from\" email address\r\n            to: email,        // The subscriber's email\r\n            subject: 'Thank you for subscribing to my newsletter!',\r\n            html: `\r\n                <p>Hi ${name ? name : 'there'}!</p>\r\n                <p>Thank you for subscribing to my newsletter.  You'll receive updates on my latest blogs and articles.</p>\r\n                <p>For any queries, please contact me at <a href=\"mailto:hriday.career@gmail.com\">hriday.career@gmail.com</a>.</p>\r\n            `,\r\n        });\r\n\r\n        if (data?.error) {  //check for error\r\n            throw new Error(`Resend error: ${data.error.message}`);\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('Error sending confirmation email:', error);\r\n        throw error; // Re-throw the error so the API route can handle it\r\n    }\r\n}\r\n\r\ninterface sendAdminNotificationEmailProps {\r\n    email: string;\r\n    name?: string\r\n}\r\n\r\nexport async function sendAdminNotificationEmail({email, name}: sendAdminNotificationEmailProps) {\r\n    try {\r\n        const data = await resend.emails.send({\r\n            from: process.env.RESEND_FROM_EMAIL!,\r\n            to: process.env.RESEND_TO_EMAIL!,  // Your email address\r\n            subject: 'New Newsletter Subscriber',\r\n            html: `<p>You have a new Newsletter Subscriber at your portfolio website.</p><p> His email is: ${email} and his name is: ${name ? `(${name})` : ''}</p></p>`,\r\n        });\r\n        if(data?.error){ //check for error\r\n             throw new Error(`Resend error: ${data.error.message}`);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error sending admin notification email:', error);\r\n        throw error; // Re-throw for consistent error handling\r\n    }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,eAAe;;;;;AACf;;AAEA,MAAM,SAAS,IAAI,0IAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,cAAc;AAO7C,eAAe,gCAAgC,EAAE,KAAK,EAAE,IAAI,EAA8B;IAC7F,IAAI;QACA,MAAM,OAAO,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;YAClC,MAAM,QAAQ,GAAG,CAAC,iBAAiB;YACnC,IAAI;YACJ,SAAS;YACT,MAAM,CAAC;sBACG,EAAE,OAAO,OAAO,QAAQ;;;YAGlC,CAAC;QACL;QAEA,IAAI,MAAM,OAAO;YACb,MAAM,IAAI,MAAM,CAAC,cAAc,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE;QACzD;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qCAAqC;QACnD,MAAM,OAAO,oDAAoD;IACrE;AACJ;AAOO,eAAe,2BAA2B,EAAC,KAAK,EAAE,IAAI,EAAkC;IAC3F,IAAI;QACA,MAAM,OAAO,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;YAClC,MAAM,QAAQ,GAAG,CAAC,iBAAiB;YACnC,IAAI,QAAQ,GAAG,CAAC,eAAe;YAC/B,SAAS;YACT,MAAM,CAAC,wFAAwF,EAAE,MAAM,kBAAkB,EAAE,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC;QAChK;QACA,IAAG,MAAM,OAAM;YACV,MAAM,IAAI,MAAM,CAAC,cAAc,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE;QAC1D;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2CAA2C;QACzD,MAAM,OAAO,yCAAyC;IAC1D;AACJ"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/app/api/subscribe/route.ts"],"sourcesContent":["// app/api/subscribe/route.ts\r\nimport { supabaseAdmin } from '@/lib/supabaseAdmin';\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { sendSubscriberConfirmationEmail, sendAdminNotificationEmail } from '@/lib/email'; // Import our email functions\r\n\r\n\r\nexport async function POST(req: NextRequest) {\r\n    try {\r\n        const { email, name } = await req.json();\r\n\r\n        if (!email || !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n            return NextResponse.json({ error: 'Invalid email address' }, { status: 400 });\r\n        }\r\n\r\n        // Insert into Supabase\r\n        const { error: supabaseError } = await supabaseAdmin\r\n            .from('subscribers')\r\n            .insert([{ email, name }]);\r\n\r\n        if (supabaseError) {\r\n            console.error(\"Supabase Error:\", supabaseError);\r\n            //  More specific error message:\r\n            return NextResponse.json({ error: `Failed to save to database: ${supabaseError.message}` }, { status: 500 });\r\n        }\r\n\r\n        // Send notification email to *you* (using our helper function)\r\n        try {\r\n            await sendAdminNotificationEmail({email, name});\r\n        } catch (adminEmailError) {\r\n            console.error(\"Admin notification email failed:\", adminEmailError);\r\n            // Log and continue, don't fail the subscription\r\n        }\r\n\r\n        // Send *confirmation* email to the *subscriber* (using our helper function)\r\n        try {\r\n            await sendSubscriberConfirmationEmail({ email, name });\r\n        } catch (confirmationEmailError) {\r\n            console.error(\"Subscriber confirmation email failed:\", confirmationEmailError);\r\n             return NextResponse.json({\r\n                error: \"Failed to send confirmation email, but subscription was successful.\",\r\n            }, { status: 500 });\r\n        }\r\n\r\n        return NextResponse.json({ message: 'Subscription successful' }, { status: 200 });\r\n\r\n    } catch (error) {\r\n        console.error(\"Subscription API Error:\", error);\r\n        return NextResponse.json({ error: 'An unexpected error occurred' }, { status: 500 });\r\n    }\r\n}\r\n"],"names":[],"mappings":"AAAA,6BAA6B;;;;AAC7B;AACA;AACA,8LAA2F,6BAA6B;;;;AAGjH,eAAe,KAAK,GAAgB;IACvC,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAEtC,IAAI,CAAC,SAAS,CAAC,4CAA4C,IAAI,CAAC,QAAQ;YACpE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,uBAAuB;QACvB,MAAM,EAAE,OAAO,aAAa,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAC/C,IAAI,CAAC,eACL,MAAM,CAAC;YAAC;gBAAE;gBAAO;YAAK;SAAE;QAE7B,IAAI,eAAe;YACf,QAAQ,KAAK,CAAC,mBAAmB;YACjC,gCAAgC;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,4BAA4B,EAAE,cAAc,OAAO,EAAE;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAC9G;QAEA,+DAA+D;QAC/D,IAAI;YACA,MAAM,CAAA,GAAA,8GAAA,CAAA,6BAA0B,AAAD,EAAE;gBAAC;gBAAO;YAAI;QACjD,EAAE,OAAO,iBAAiB;YACtB,QAAQ,KAAK,CAAC,oCAAoC;QAClD,gDAAgD;QACpD;QAEA,4EAA4E;QAC5E,IAAI;YACA,MAAM,CAAA,GAAA,8GAAA,CAAA,kCAA+B,AAAD,EAAE;gBAAE;gBAAO;YAAK;QACxD,EAAE,OAAO,wBAAwB;YAC7B,QAAQ,KAAK,CAAC,yCAAyC;YACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACtB,OAAO;YACX,GAAG;gBAAE,QAAQ;YAAI;QACrB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAEnF,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACtF;AACJ"}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}