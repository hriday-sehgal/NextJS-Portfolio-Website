{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/lib/supabaseAdmin.ts"],"sourcesContent":["// lib/supabaseAdmin.ts\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseAdminUrl = process.env.SUPABASE_URL;\r\nconst supabaseAdminKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nif (!supabaseAdminUrl || !supabaseAdminKey) {\r\n  throw new Error(\"Supabase Admin URL and Key must be provided\");\r\n}\r\n\r\nexport const supabaseAdmin = createClient(supabaseAdminUrl, supabaseAdminKey);\r\n\r\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;AACvB;;AAEA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AACjD,MAAM,mBAAmB,QAAQ,GAAG,CAAC,yBAAyB;AAE9D,IAAI,CAAC,oBAAoB,CAAC,kBAAkB;IAC1C,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,gBAAgB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,kBAAkB"}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/app/api/contact/route.ts"],"sourcesContent":["// app/api/contact/route.ts\r\nimport { supabaseAdmin } from '@/lib/supabaseAdmin';\r\nimport { Resend } from 'resend';\r\nimport { NextRequest, NextResponse } from 'next/server';\r\n\r\nconst resend = new Resend(process.env.RESEND_API_KEY);\r\n\r\nexport async function POST(req: NextRequest) {\r\n    try {\r\n        const { name, email, message } = await req.json();\r\n\r\n        // Validate data (important for security and data integrity)\r\n        if (!name || !email || !message) {\r\n            return NextResponse.json({ error: 'All fields are required' }, { status: 400 });\r\n        }\r\n        if (typeof name !== 'string' || typeof email !== 'string' || typeof message !== 'string'){\r\n            return NextResponse.json({ error: 'Invalid data types' }, { status: 400 });\r\n        }\r\n\r\n        // Insert into Supabase\r\n        const { error: supabaseError } = await supabaseAdmin\r\n            .from('contacts')\r\n            .insert([{ name, email, message }]);\r\n\r\n        if (supabaseError) {\r\n            console.error(\"Supabase Error:\", supabaseError);\r\n            return NextResponse.json({ error: 'Failed to save to database' }, { status: 500 });\r\n        }\r\n\r\n        // Send email via Resend\r\n        try {\r\n            const data = await resend.emails.send({\r\n                from: process.env.RESEND_FROM_EMAIL!,  // Use the ! operator to assert non-null\r\n                to: process.env.RESEND_TO_EMAIL!,   // Use the ! operator\r\n                subject: 'New Contact Form Submission',\r\n                html: `\r\n                    <p>You have a new contact form submission on your portfolio website:</p>\r\n                    <ul>\r\n                        <li><strong>Name:</strong> ${name}</li>\r\n                        <li><strong>Email:</strong> ${email}</li>\r\n                        <li><strong>Message:</strong> ${message}</li>\r\n                    </ul>\r\n                `,\r\n            });\r\n\r\n            console.log(\"Resend Email Response:\", data); //log full email response for debugging\r\n\r\n\r\n        } catch (resendError) {\r\n            console.error(\"Resend Error:\", resendError);\r\n             return NextResponse.json({ error: 'Failed to send email but the message was saved to database' }, { status: 500 });\r\n\r\n        }\r\n\r\n        return NextResponse.json({ message: 'Message sent and saved successfully!' }, { status: 200 });\r\n\r\n    } catch (error) {\r\n        console.error(\"Unexpected Error:\", error);\r\n        return NextResponse.json({ error: 'An unexpected error occurred' }, { status: 500 });\r\n    }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,2BAA2B;;;;AAC3B;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,0IAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,cAAc;AAE7C,eAAe,KAAK,GAAgB;IACvC,IAAI;QACA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/C,4DAA4D;QAC5D,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QACjF;QACA,IAAI,OAAO,SAAS,YAAY,OAAO,UAAU,YAAY,OAAO,YAAY,UAAS;YACrF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC5E;QAEA,uBAAuB;QACvB,MAAM,EAAE,OAAO,aAAa,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAC/C,IAAI,CAAC,YACL,MAAM,CAAC;YAAC;gBAAE;gBAAM;gBAAO;YAAQ;SAAE;QAEtC,IAAI,eAAe;YACf,QAAQ,KAAK,CAAC,mBAAmB;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QACpF;QAEA,wBAAwB;QACxB,IAAI;YACA,MAAM,OAAO,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;gBAClC,MAAM,QAAQ,GAAG,CAAC,iBAAiB;gBACnC,IAAI,QAAQ,GAAG,CAAC,eAAe;gBAC/B,SAAS;gBACT,MAAM,CAAC;;;mDAG4B,EAAE,KAAK;oDACN,EAAE,MAAM;sDACN,EAAE,QAAQ;;gBAEhD,CAAC;YACL;YAEA,QAAQ,GAAG,CAAC,0BAA0B,OAAO,uCAAuC;QAGxF,EAAE,OAAO,aAAa;YAClB,QAAQ,KAAK,CAAC,iBAAiB;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6D,GAAG;gBAAE,QAAQ;YAAI;QAErH;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAuC,GAAG;YAAE,QAAQ;QAAI;IAEhG,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACtF;AACJ"}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}