{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/lib/supabaseAdmin.ts"],"sourcesContent":["// lib/supabaseAdmin.ts  (For use in API routes *only*)\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseAdminUrl = process.env.SUPABASE_URL;\r\nconst supabaseAdminKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\nif (!supabaseAdminUrl || !supabaseAdminKey) {\r\n  throw new Error(\"Supabase Admin URL and Key must be provided\");\r\n}\r\n\r\nexport const supabaseAdmin = createClient(supabaseAdminUrl, supabaseAdminKey);\r\n"],"names":[],"mappings":"AAAA,uDAAuD;;;;AACvD;;AAEA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AACjD,MAAM,mBAAmB,QAAQ,GAAG,CAAC,yBAAyB;AAC9D,IAAI,CAAC,oBAAoB,CAAC,kBAAkB;IAC1C,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,gBAAgB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,kBAAkB"}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/app/api/subscribe/route.ts"],"sourcesContent":["// app/api/subscribe/route.ts\r\nimport { supabaseAdmin } from '@/lib/supabaseAdmin';\r\nimport { Resend } from 'resend';\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport SibApiV3Sdk from 'sib-api-v3-sdk'; // Import Brevo SDK\r\n\r\nconst resend = new Resend(process.env.RESEND_API_KEY);\r\n\r\nconst defaultClient = SibApiV3Sdk.ApiClient.instance;\r\nconst apiKey = defaultClient.authentications['api-key'];\r\napiKey.apiKey = process.env.BREVO_API_KEY;\r\nconst apiInstance = new SibApiV3Sdk.TransactionalEmailsApi();\r\n\r\n\r\nexport async function POST(req: NextRequest) {\r\n    try {\r\n        const { email, name } = await req.json();\r\n\r\n        if (!email || !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n            return NextResponse.json({ error: 'Invalid email address' }, { status: 400 });\r\n        }\r\n\r\n        // Insert into Supabase\r\n        const { error: supabaseError } = await supabaseAdmin\r\n            .from('subscribers')\r\n            .insert([{ email, name }]); // Include name\r\n\r\n        if (supabaseError) {\r\n            console.error(\"Supabase Error:\", supabaseError);\r\n            return NextResponse.json({ error: 'Failed to save to database' }, { status: 500 });\r\n        }\r\n\r\n        // Send notification email to you (using Resend)\r\n        try {\r\n            await resend.emails.send({\r\n                from: process.env.RESEND_FROM_EMAIL!,\r\n                to: process.env.RESEND_TO_EMAIL!,\r\n                subject: 'New Newsletter Subscriber',\r\n                html: `<p>New subscriber: ${email} ${name ? `(${name})` : ''}</p>`,\r\n            });\r\n        } catch (resendError) {\r\n            console.error(\"Resend Error:\", resendError);\r\n            //  Log the error, but don't fail the user's subscription.\r\n        }\r\n\r\n\r\n        // Send confirmation email to the subscriber (using Brevo)\r\n        try {\r\n            let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\r\n\r\n            sendSmtpEmail = {\r\n                to: [{ email: email }],\r\n                sender: { email: process.env.BREVO_SENDER_EMAIL!, name: process.env.BREVO_SENDER_NAME! },\r\n                templateId: parseInt(process.env.BREVO_CONFIRMATION_TEMPLATE_ID!), // Use template\r\n                params: {\r\n                  name: name || 'Subscriber', // Use name if available, otherwise default\r\n                },\r\n                subject: 'Thank you for subscribing!', // Add a subject\r\n              };\r\n\r\n            await apiInstance.sendTransacEmail(sendSmtpEmail);\r\n\r\n        } catch (brevoError) {\r\n            console.error(\"Brevo Error:\", brevoError);\r\n           return NextResponse.json({ error: \"Failed to send confirmation email, but subscription successful.\" }, {status: 500}) // Inform user\r\n\r\n           // Don't prevent successful subscription, even if the confirmation email fails.\r\n        }\r\n\r\n        return NextResponse.json({ message: 'Subscription successful' }, { status: 200 });\r\n\r\n    } catch (error) {\r\n        console.error(\"Subscription API Error:\", error);\r\n        return NextResponse.json({ error: 'An unexpected error occurred' }, { status: 500 });\r\n    }\r\n}\r\n"],"names":[],"mappings":"AAAA,6BAA6B;;;;AAC7B;AACA;AACA;AACA,qQAA0C,mBAAmB;;;;;AAE7D,MAAM,SAAS,IAAI,0IAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,cAAc;AAEpD,MAAM,gBAAgB,yJAAA,CAAA,UAAW,CAAC,SAAS,CAAC,QAAQ;AACpD,MAAM,SAAS,cAAc,eAAe,CAAC,UAAU;AACvD,OAAO,MAAM,GAAG,QAAQ,GAAG,CAAC,aAAa;AACzC,MAAM,cAAc,IAAI,yJAAA,CAAA,UAAW,CAAC,sBAAsB;AAGnD,eAAe,KAAK,GAAgB;IACvC,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAEtC,IAAI,CAAC,SAAS,CAAC,4CAA4C,IAAI,CAAC,QAAQ;YACpE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,uBAAuB;QACvB,MAAM,EAAE,OAAO,aAAa,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAC/C,IAAI,CAAC,eACL,MAAM,CAAC;YAAC;gBAAE;gBAAO;YAAK;SAAE,GAAG,eAAe;QAE/C,IAAI,eAAe;YACf,QAAQ,KAAK,CAAC,mBAAmB;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QACpF;QAEA,gDAAgD;QAChD,IAAI;YACA,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;gBACrB,MAAM,QAAQ,GAAG,CAAC,iBAAiB;gBACnC,IAAI,QAAQ,GAAG,CAAC,eAAe;gBAC/B,SAAS;gBACT,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;YACtE;QACJ,EAAE,OAAO,aAAa;YAClB,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,0DAA0D;QAC9D;QAGA,0DAA0D;QAC1D,IAAI;YACA,IAAI,gBAAgB,IAAI,yJAAA,CAAA,UAAW,CAAC,aAAa;YAEjD,gBAAgB;gBACZ,IAAI;oBAAC;wBAAE,OAAO;oBAAM;iBAAE;gBACtB,QAAQ;oBAAE,OAAO,QAAQ,GAAG,CAAC,kBAAkB;oBAAG,MAAM,QAAQ,GAAG,CAAC,iBAAiB;gBAAE;gBACvF,YAAY,SAAS,QAAQ,GAAG,CAAC,8BAA8B;gBAC/D,QAAQ;oBACN,MAAM,QAAQ;gBAChB;gBACA,SAAS;YACX;YAEF,MAAM,YAAY,gBAAgB,CAAC;QAEvC,EAAE,OAAO,YAAY;YACjB,QAAQ,KAAK,CAAC,gBAAgB;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkE,GAAG;gBAAC,QAAQ;YAAG,GAAG,cAAc;;QAEpI,+EAA+E;QAClF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAEnF,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACtF;AACJ"}},
    {"offset": {"line": 299, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}