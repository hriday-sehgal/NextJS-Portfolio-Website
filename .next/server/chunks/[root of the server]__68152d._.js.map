{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/lib/supabaseAdmin.ts"],"sourcesContent":["// lib/supabaseAdmin.ts  (For use in API routes *only*)\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseAdminUrl = process.env.SUPABASE_URL;\r\nconst supabaseAdminKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\nif (!supabaseAdminUrl || !supabaseAdminKey) {\r\n  throw new Error(\"Supabase Admin URL and Key must be provided\");\r\n}\r\n\r\nexport const supabaseAdmin = createClient(supabaseAdminUrl, supabaseAdminKey);\r\n"],"names":[],"mappings":"AAAA,uDAAuD;;;;AACvD;;AAEA,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AACjD,MAAM,mBAAmB,QAAQ,GAAG,CAAC,yBAAyB;AAC9D,IAAI,CAAC,oBAAoB,CAAC,kBAAkB;IAC1C,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,gBAAgB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,kBAAkB"}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/lib/brevo.ts"],"sourcesContent":[" // lib/brevo.ts\r\n import SibApiV3Sdk from 'sib-api-v3-sdk';\r\n\r\n export async function sendConfirmationEmail(email: string, name?: string) {\r\n     const defaultClient = SibApiV3Sdk.ApiClient.instance;\r\n     const apiKey = defaultClient.authentications['api-key'];\r\n     apiKey.apiKey = process.env.BREVO_API_KEY;\r\n     const apiInstance = new SibApiV3Sdk.TransactionalEmailsApi();\r\n\r\n     let sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();\r\n\r\n     sendSmtpEmail = {\r\n             to: [{ email: email }],\r\n             sender: { email: process.env.BREVO_SENDER_EMAIL!, name: process.env.BREVO_SENDER_NAME! },\r\n             templateId: parseInt(process.env.BREVO_CONFIRMATION_TEMPLATE_ID!), // Use template\r\n             params: {\r\n               name: name || 'Subscriber', // Use name if available, otherwise default\r\n             },\r\n             subject: 'Thank you for subscribing!', // Add a subject\r\n     };\r\n    return apiInstance.sendTransacEmail(sendSmtpEmail);\r\n }\r\n\r\n"],"names":[],"mappings":"AAAC,eAAe;;;;AACf;;AAEO,eAAe,sBAAsB,KAAa,EAAE,IAAa;IACpE,MAAM,gBAAgB,yJAAA,CAAA,UAAW,CAAC,SAAS,CAAC,QAAQ;IACpD,MAAM,SAAS,cAAc,eAAe,CAAC,UAAU;IACvD,OAAO,MAAM,GAAG,QAAQ,GAAG,CAAC,aAAa;IACzC,MAAM,cAAc,IAAI,yJAAA,CAAA,UAAW,CAAC,sBAAsB;IAE1D,IAAI,gBAAgB,IAAI,yJAAA,CAAA,UAAW,CAAC,aAAa;IAEjD,gBAAgB;QACR,IAAI;YAAC;gBAAE,OAAO;YAAM;SAAE;QACtB,QAAQ;YAAE,OAAO,QAAQ,GAAG,CAAC,kBAAkB;YAAG,MAAM,QAAQ,GAAG,CAAC,iBAAiB;QAAE;QACvF,YAAY,SAAS,QAAQ,GAAG,CAAC,8BAA8B;QAC/D,QAAQ;YACN,MAAM,QAAQ;QAChB;QACA,SAAS;IACjB;IACD,OAAO,YAAY,gBAAgB,CAAC;AACvC"}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/app/api/subscribe/route.ts"],"sourcesContent":[" // app/api/subscribe/route.ts\r\n import { supabaseAdmin } from '@/lib/supabaseAdmin';\r\n import { Resend } from 'resend';\r\n import { NextRequest, NextResponse } from 'next/server';\r\n import { sendConfirmationEmail } from '@/lib/brevo';\r\n\r\n const resend = new Resend(process.env.RESEND_API_KEY);\r\n\r\n export async function POST(req: NextRequest) {\r\n     try {\r\n         const { email, name } = await req.json();\r\n\r\n         if (!email || !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n             return NextResponse.json({ error: 'Invalid email address' }, { status: 400 });\r\n         }\r\n\r\n         // Insert into Supabase\r\n         const { error: supabaseError } = await supabaseAdmin\r\n             .from('subscribers')\r\n             .insert([{ email, name }]); // Include name\r\n\r\n         if (supabaseError) {\r\n             console.error(\"Supabase Error:\", supabaseError);\r\n             return NextResponse.json({ error: 'Failed to save to database' }, { status: 500 });\r\n         }\r\n\r\n         // Send notification email to you (using Resend)\r\n         try {\r\n             await resend.emails.send({\r\n                 from: process.env.RESEND_FROM_EMAIL!,\r\n                 to: process.env.RESEND_TO_EMAIL!,\r\n                 subject: 'New Newsletter Subscriber',\r\n                 html: `<p>New subscriber: ${email} ${name ? `(${name})` : ''}</p>`,\r\n             });\r\n         } catch (resendError) {\r\n             console.error(\"Resend Error:\", resendError);\r\n             //  Log the error, but don't fail the user's subscription.\r\n         }\r\n\r\n         // Send confirmation email to the subscriber (using Brevo) - NOW WITH HELPER:\r\n         try {\r\n             await sendConfirmationEmail(email, name);\r\n\r\n         } catch (brevoError) {\r\n             console.error(\"Brevo Error:\", brevoError);\r\n             return NextResponse.json({ error: \"Failed to send confirmation email, but subscription successful.\" }, { status: 500 })\r\n         }\r\n\r\n         return NextResponse.json({ message: 'Subscription successful' }, { status: 200 });\r\n\r\n     } catch (error) {\r\n         console.error(\"Subscription API Error:\", error);\r\n         return NextResponse.json({ error: 'An unexpected error occurred' }, { status: 500 });\r\n     }\r\n }\r\n\r\n"],"names":[],"mappings":"AAAC,6BAA6B;;;;AAC7B;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,0IAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,cAAc;AAE7C,eAAe,KAAK,GAAgB;IACvC,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAEtC,IAAI,CAAC,SAAS,CAAC,4CAA4C,IAAI,CAAC,QAAQ;YACpE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,uBAAuB;QACvB,MAAM,EAAE,OAAO,aAAa,EAAE,GAAG,MAAM,sHAAA,CAAA,gBAAa,CAC/C,IAAI,CAAC,eACL,MAAM,CAAC;YAAC;gBAAE;gBAAO;YAAK;SAAE,GAAG,eAAe;QAE/C,IAAI,eAAe;YACf,QAAQ,KAAK,CAAC,mBAAmB;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QACpF;QAEA,gDAAgD;QAChD,IAAI;YACA,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;gBACrB,MAAM,QAAQ,GAAG,CAAC,iBAAiB;gBACnC,IAAI,QAAQ,GAAG,CAAC,eAAe;gBAC/B,SAAS;gBACT,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;YACtE;QACJ,EAAE,OAAO,aAAa;YAClB,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,0DAA0D;QAC9D;QAEA,6EAA6E;QAC7E,IAAI;YACA,MAAM,CAAA,GAAA,8GAAA,CAAA,wBAAqB,AAAD,EAAE,OAAO;QAEvC,EAAE,OAAO,YAAY;YACjB,QAAQ,KAAK,CAAC,gBAAgB;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkE,GAAG;gBAAE,QAAQ;YAAI;QACzH;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAEnF,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACtF;AACJ"}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}