{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/AccountApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/GetAccount'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/GetAccount'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.AccountApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetAccount);\n  }\n}(this, function(ApiClient, GetAccount) {\n  'use strict';\n\n  /**\n   * Account service.\n   * @module api/AccountApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new AccountApi. \n   * @alias module:api/AccountApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Get your account information, plan and credits details\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAccount} and HTTP response\n     */\n    this.getAccountWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetAccount;\n\n      return this.apiClient.callApi(\n        '/account', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get your account information, plan and credits details\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAccount}\n     */\n    this.getAccount = function() {\n      return this.getAccountWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcC,GAEA,CAAA,SAAS,IAAI,EAAE,OAAO;IACrB,IAAI,OAAO,WAAW,cAAc,OAAO,GAAG,EAAE;QAC9C,wCAAwC;QACxC,wDAA0C;;;;;;;;;IAC5C,OAAO,IAAI,+CAAkB,YAAY,OAAO,OAAO,EAAE;QACvD,qEAAqE;QACrE,OAAO,OAAO,GAAG;IACnB,OAAO;QACL,mCAAmC;QACnC,IAAI,CAAC,KAAK,WAAW,EAAE;YACrB,KAAK,WAAW,GAAG,CAAC;QACtB;QACA,KAAK,WAAW,CAAC,UAAU,GAAG,QAAQ,KAAK,WAAW,CAAC,SAAS,EAAE,KAAK,WAAW,CAAC,UAAU;IAC/F;AACF,CAAA,EAAE,IAAI,EAAE,SAAS,SAAS,EAAE,UAAU;IACpC;IAEA;;;;GAIC,GAED;;;;;;GAMC,GACD,IAAI,UAAU,SAAS,SAAS;QAC9B,IAAI,CAAC,SAAS,GAAG,aAAa,UAAU,QAAQ;QAIhD;;;KAGC,GACD,IAAI,CAAC,sBAAsB,GAAG;YAC5B,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,YAAY,OACZ,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;KAGC,GACD,IAAI,CAAC,UAAU,GAAG;YAChB,OAAO,IAAI,CAAC,sBAAsB,GAC/B,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;IACF;IAEA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/CompaniesApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/Body', 'model/Body1', 'model/Body2', 'model/CompaniesList', 'model/Company', 'model/CompanyAttributes', 'model/ErrorModel', 'model/InlineResponse200'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/Body'), require('../model/Body1'), require('../model/Body2'), require('../model/CompaniesList'), require('../model/Company'), require('../model/CompanyAttributes'), require('../model/ErrorModel'), require('../model/InlineResponse200'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.CompaniesApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.Body, root.SibApiV3Sdk.Body1, root.SibApiV3Sdk.Body2, root.SibApiV3Sdk.CompaniesList, root.SibApiV3Sdk.Company, root.SibApiV3Sdk.CompanyAttributes, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.InlineResponse200);\n  }\n}(this, function(ApiClient, Body, Body1, Body2, CompaniesList, Company, CompanyAttributes, ErrorModel, InlineResponse200) {\n  'use strict';\n\n  /**\n   * Companies service.\n   * @module api/CompaniesApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new CompaniesApi. \n   * @alias module:api/CompaniesApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Get company attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompanyAttributes} and HTTP response\n     */\n    this.companiesAttributesGetWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CompanyAttributes;\n\n      return this.apiClient.callApi(\n        '/companies/attributes', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get company attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompanyAttributes}\n     */\n    this.companiesAttributesGet = function() {\n      return this.companiesAttributesGetWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all companies\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.filters Filter by attrbutes. If you have filter for owner on your side please send it as {\\\"attributes.owner\\\":\\\"5b1a17d914b73d35a76ca0c7\\\"}\n     * @param {Number} opts.linkedContactsIds Filter by linked contacts ids\n     * @param {String} opts.linkedDealsIds Filter by linked deals ids\n     * @param {Number} opts.page Index of the first document of the page\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed\n     * @param {String} opts.sortBy The field used to sort field names.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompaniesList} and HTTP response\n     */\n    this.companiesGetWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'filters': opts['filters'],\n        'linkedContactsIds': opts['linkedContactsIds'],\n        'linkedDealsIds': opts['linkedDealsIds'],\n        'page': opts['page'],\n        'limit': opts['limit'],\n        'sort': opts['sort'],\n        'sortBy': opts['sortBy'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CompaniesList;\n\n      return this.apiClient.callApi(\n        '/companies', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all companies\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.filters Filter by attrbutes. If you have filter for owner on your side please send it as {\\\"attributes.owner\\\":\\\"5b1a17d914b73d35a76ca0c7\\\"}\n     * @param {Number} opts.linkedContactsIds Filter by linked contacts ids\n     * @param {String} opts.linkedDealsIds Filter by linked deals ids\n     * @param {Number} opts.page Index of the first document of the page\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed\n     * @param {String} opts.sortBy The field used to sort field names.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CompaniesList}\n     */\n    this.companiesGet = function(opts) {\n      return this.companiesGetWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a company\n     * @param {String} id \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.companiesIdDeleteWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling companiesIdDelete\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/companies/{id}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a company\n     * @param {String} id \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.companiesIdDelete = function(id) {\n      return this.companiesIdDeleteWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a company\n     * @param {String} id \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Company} and HTTP response\n     */\n    this.companiesIdGetWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling companiesIdGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = Company;\n\n      return this.apiClient.callApi(\n        '/companies/{id}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a company\n     * @param {String} id \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Company}\n     */\n    this.companiesIdGet = function(id) {\n      return this.companiesIdGetWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a company\n     * @param {String} id \n     * @param {module:model/Body1} body Updated company details.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Company} and HTTP response\n     */\n    this.companiesIdPatchWithHttpInfo = function(id, body) {\n      var postBody = body;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling companiesIdPatch\");\n      }\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling companiesIdPatch\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = Company;\n\n      return this.apiClient.callApi(\n        '/companies/{id}', 'PATCH',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a company\n     * @param {String} id \n     * @param {module:model/Body1} body Updated company details.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Company}\n     */\n    this.companiesIdPatch = function(id, body) {\n      return this.companiesIdPatchWithHttpInfo(id, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Link and Unlink company with contacts and deals\n     * @param {String} id \n     * @param {module:model/Body2} body Linked / Unlinked contacts and deals ids.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.companiesLinkUnlinkIdPatchWithHttpInfo = function(id, body) {\n      var postBody = body;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling companiesLinkUnlinkIdPatch\");\n      }\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling companiesLinkUnlinkIdPatch\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/companies/link-unlink/{id}', 'PATCH',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Link and Unlink company with contacts and deals\n     * @param {String} id \n     * @param {module:model/Body2} body Linked / Unlinked contacts and deals ids.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.companiesLinkUnlinkIdPatch = function(id, body) {\n      return this.companiesLinkUnlinkIdPatchWithHttpInfo(id, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a company\n     * @param {module:model/Body} body Company create data.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response\n     */\n    this.companiesPostWithHttpInfo = function(body) {\n      var postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling companiesPost\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse200;\n\n      return this.apiClient.callApi(\n        '/companies', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a company\n     * @param {module:model/Body} body Company create data.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}\n     */\n    this.companiesPost = function(body) {\n      return this.companiesPostWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 473, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/ContactsApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/AddContactToList', 'model/CreateAttribute', 'model/CreateContact', 'model/CreateDoiContact', 'model/CreateList', 'model/CreateModel', 'model/CreateUpdateContactModel', 'model/CreateUpdateFolder', 'model/CreatedProcessId', 'model/ErrorModel', 'model/GetAttributes', 'model/GetContactCampaignStats', 'model/GetContacts', 'model/GetExtendedContactDetails', 'model/GetExtendedList', 'model/GetFolder', 'model/GetFolderLists', 'model/GetFolders', 'model/GetLists', 'model/PostContactInfo', 'model/RemoveContactFromList', 'model/RequestContactExport', 'model/RequestContactImport', 'model/UpdateAttribute', 'model/UpdateBatchContacts', 'model/UpdateBatchContactsModel', 'model/UpdateContact', 'model/UpdateList'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/AddContactToList'), require('../model/CreateAttribute'), require('../model/CreateContact'), require('../model/CreateDoiContact'), require('../model/CreateList'), require('../model/CreateModel'), require('../model/CreateUpdateContactModel'), require('../model/CreateUpdateFolder'), require('../model/CreatedProcessId'), require('../model/ErrorModel'), require('../model/GetAttributes'), require('../model/GetContactCampaignStats'), require('../model/GetContacts'), require('../model/GetExtendedContactDetails'), require('../model/GetExtendedList'), require('../model/GetFolder'), require('../model/GetFolderLists'), require('../model/GetFolders'), require('../model/GetLists'), require('../model/PostContactInfo'), require('../model/RemoveContactFromList'), require('../model/RequestContactExport'), require('../model/RequestContactImport'), require('../model/UpdateAttribute'), require('../model/UpdateBatchContacts'), require('../model/UpdateBatchContactsModel'), require('../model/UpdateContact'), require('../model/UpdateList'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.ContactsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AddContactToList, root.SibApiV3Sdk.CreateAttribute, root.SibApiV3Sdk.CreateContact, root.SibApiV3Sdk.CreateDoiContact, root.SibApiV3Sdk.CreateList, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateUpdateContactModel, root.SibApiV3Sdk.CreateUpdateFolder, root.SibApiV3Sdk.CreatedProcessId, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetAttributes, root.SibApiV3Sdk.GetContactCampaignStats, root.SibApiV3Sdk.GetContacts, root.SibApiV3Sdk.GetExtendedContactDetails, root.SibApiV3Sdk.GetExtendedList, root.SibApiV3Sdk.GetFolder, root.SibApiV3Sdk.GetFolderLists, root.SibApiV3Sdk.GetFolders, root.SibApiV3Sdk.GetLists, root.SibApiV3Sdk.PostContactInfo, root.SibApiV3Sdk.RemoveContactFromList, root.SibApiV3Sdk.RequestContactExport, root.SibApiV3Sdk.RequestContactImport, root.SibApiV3Sdk.UpdateAttribute, root.SibApiV3Sdk.UpdateBatchContacts, root.SibApiV3Sdk.UpdateBatchContactsModel, root.SibApiV3Sdk.UpdateContact, root.SibApiV3Sdk.UpdateList);\n  }\n}(this, function(ApiClient, AddContactToList, CreateAttribute, CreateContact, CreateDoiContact, CreateList, CreateModel, CreateUpdateContactModel, CreateUpdateFolder, CreatedProcessId, ErrorModel, GetAttributes, GetContactCampaignStats, GetContacts, GetExtendedContactDetails, GetExtendedList, GetFolder, GetFolderLists, GetFolders, GetLists, PostContactInfo, RemoveContactFromList, RequestContactExport, RequestContactImport, UpdateAttribute, UpdateBatchContacts, UpdateBatchContactsModel, UpdateContact, UpdateList) {\n  'use strict';\n\n  /**\n   * Contacts service.\n   * @module api/ContactsApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new ContactsApi. \n   * @alias module:api/ContactsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Add existing contacts to a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/AddContactToList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostContactInfo} and HTTP response\n     */\n    this.addContactToListWithHttpInfo = function(listId, contactEmails) {\n      var postBody = contactEmails;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling addContactToList\");\n      }\n\n      // verify the required parameter 'contactEmails' is set\n      if (contactEmails === undefined || contactEmails === null) {\n        throw new Error(\"Missing the required parameter 'contactEmails' when calling addContactToList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = PostContactInfo;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}/contacts/add', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Add existing contacts to a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/AddContactToList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostContactInfo}\n     */\n    this.addContactToList = function(listId, contactEmails) {\n      return this.addContactToListWithHttpInfo(listId, contactEmails)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the attribute\n     * @param {module:model/CreateAttribute} createAttribute Values to create an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.createAttributeWithHttpInfo = function(attributeCategory, attributeName, createAttribute) {\n      var postBody = createAttribute;\n\n      // verify the required parameter 'attributeCategory' is set\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling createAttribute\");\n      }\n\n      // verify the required parameter 'attributeName' is set\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling createAttribute\");\n      }\n\n      // verify the required parameter 'createAttribute' is set\n      if (createAttribute === undefined || createAttribute === null) {\n        throw new Error(\"Missing the required parameter 'createAttribute' when calling createAttribute\");\n      }\n\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/attributes/{attributeCategory}/{attributeName}', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the attribute\n     * @param {module:model/CreateAttribute} createAttribute Values to create an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.createAttribute = function(attributeCategory, attributeName, createAttribute) {\n      return this.createAttributeWithHttpInfo(attributeCategory, attributeName, createAttribute)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a contact\n     * @param {module:model/CreateContact} createContact Values to create a contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateUpdateContactModel} and HTTP response\n     */\n    this.createContactWithHttpInfo = function(createContact) {\n      var postBody = createContact;\n\n      // verify the required parameter 'createContact' is set\n      if (createContact === undefined || createContact === null) {\n        throw new Error(\"Missing the required parameter 'createContact' when calling createContact\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateUpdateContactModel;\n\n      return this.apiClient.callApi(\n        '/contacts', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a contact\n     * @param {module:model/CreateContact} createContact Values to create a contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateUpdateContactModel}\n     */\n    this.createContact = function(createContact) {\n      return this.createContactWithHttpInfo(createContact)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create Contact via DOI (Double-Opt-In) Flow\n     * @param {module:model/CreateDoiContact} createDoiContact Values to create the Double opt-in (DOI) contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.createDoiContactWithHttpInfo = function(createDoiContact) {\n      var postBody = createDoiContact;\n\n      // verify the required parameter 'createDoiContact' is set\n      if (createDoiContact === undefined || createDoiContact === null) {\n        throw new Error(\"Missing the required parameter 'createDoiContact' when calling createDoiContact\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/doubleOptinConfirmation', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create Contact via DOI (Double-Opt-In) Flow\n     * @param {module:model/CreateDoiContact} createDoiContact Values to create the Double opt-in (DOI) contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.createDoiContact = function(createDoiContact) {\n      return this.createDoiContactWithHttpInfo(createDoiContact)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a folder\n     * @param {module:model/CreateUpdateFolder} createFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createFolderWithHttpInfo = function(createFolder) {\n      var postBody = createFolder;\n\n      // verify the required parameter 'createFolder' is set\n      if (createFolder === undefined || createFolder === null) {\n        throw new Error(\"Missing the required parameter 'createFolder' when calling createFolder\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/contacts/folders', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a folder\n     * @param {module:model/CreateUpdateFolder} createFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createFolder = function(createFolder) {\n      return this.createFolderWithHttpInfo(createFolder)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a list\n     * @param {module:model/CreateList} createList Values to create a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createListWithHttpInfo = function(createList) {\n      var postBody = createList;\n\n      // verify the required parameter 'createList' is set\n      if (createList === undefined || createList === null) {\n        throw new Error(\"Missing the required parameter 'createList' when calling createList\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/contacts/lists', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a list\n     * @param {module:model/CreateList} createList Values to create a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createList = function(createList) {\n      return this.createListWithHttpInfo(createList)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteAttributeWithHttpInfo = function(attributeCategory, attributeName) {\n      var postBody = null;\n\n      // verify the required parameter 'attributeCategory' is set\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling deleteAttribute\");\n      }\n\n      // verify the required parameter 'attributeName' is set\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling deleteAttribute\");\n      }\n\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/attributes/{attributeCategory}/{attributeName}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteAttribute = function(attributeCategory, attributeName) {\n      return this.deleteAttributeWithHttpInfo(attributeCategory, attributeName)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteContactWithHttpInfo = function(identifier) {\n      var postBody = null;\n\n      // verify the required parameter 'identifier' is set\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling deleteContact\");\n      }\n\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/{identifier}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteContact = function(identifier) {\n      return this.deleteContactWithHttpInfo(identifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a folder (and all its lists)\n     * @param {Number} folderId Id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteFolderWithHttpInfo = function(folderId) {\n      var postBody = null;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling deleteFolder\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a folder (and all its lists)\n     * @param {Number} folderId Id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteFolder = function(folderId) {\n      return this.deleteFolderWithHttpInfo(folderId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a list\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteListWithHttpInfo = function(listId) {\n      var postBody = null;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling deleteList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a list\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteList = function(listId) {\n      return this.deleteListWithHttpInfo(listId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * List all attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAttributes} and HTTP response\n     */\n    this.getAttributesWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetAttributes;\n\n      return this.apiClient.callApi(\n        '/contacts/attributes', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * List all attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAttributes}\n     */\n    this.getAttributes = function() {\n      return this.getAttributesWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a contact's details\n     * Along with the contact details, this endpoint will show the statistics of contact for the recent 90 days by default. To fetch the earlier statistics, please use Get contact campaign stats (https://developers.sendinblue.com/reference/contacts-7#getcontactstats) endpoint with the appropriate date ranges.\n     * @param {String} identifier Email (urlencoded) OR ID of the contact OR its SMS attribute value\n     * @param {Object} opts Optional parameters\n     * @param {Object} opts.startDate **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate \n     * @param {Object} opts.endDate **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate. \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExtendedContactDetails} and HTTP response\n     */\n    this.getContactInfoWithHttpInfo = function(identifier, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'identifier' is set\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling getContactInfo\");\n      }\n\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetExtendedContactDetails;\n\n      return this.apiClient.callApi(\n        '/contacts/{identifier}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a contact's details\n     * Along with the contact details, this endpoint will show the statistics of contact for the recent 90 days by default. To fetch the earlier statistics, please use Get contact campaign stats (https://developers.sendinblue.com/reference/contacts-7#getcontactstats) endpoint with the appropriate date ranges.\n     * @param {String} identifier Email (urlencoded) OR ID of the contact OR its SMS attribute value\n     * @param {Object} opts Optional parameters\n     * @param {Object} opts.startDate **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate \n     * @param {Object} opts.endDate **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate. \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExtendedContactDetails}\n     */\n    this.getContactInfo = function(identifier, opts) {\n      return this.getContactInfoWithHttpInfo(identifier, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get email campaigns' statistics for a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate. Maximum difference between startDate and endDate should not be greater than 90 days\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetContactCampaignStats} and HTTP response\n     */\n    this.getContactStatsWithHttpInfo = function(identifier, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'identifier' is set\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling getContactStats\");\n      }\n\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetContactCampaignStats;\n\n      return this.apiClient.callApi(\n        '/contacts/{identifier}/campaignStats', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get email campaigns' statistics for a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate. Maximum difference between startDate and endDate should not be greater than 90 days\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetContactCampaignStats}\n     */\n    this.getContactStats = function(identifier, opts) {\n      return this.getContactStatsWithHttpInfo(identifier, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all the contacts\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {String} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetContacts} and HTTP response\n     */\n    this.getContactsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'modifiedSince': opts['modifiedSince'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetContacts;\n\n      return this.apiClient.callApi(\n        '/contacts', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all the contacts\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {String} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetContacts}\n     */\n    this.getContacts = function(opts) {\n      return this.getContactsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get contacts in a list\n     * @param {Number} listId Id of the list\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetContacts} and HTTP response\n     */\n    this.getContactsFromListWithHttpInfo = function(listId, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling getContactsFromList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n        'modifiedSince': opts['modifiedSince'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetContacts;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}/contacts', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get contacts in a list\n     * @param {Number} listId Id of the list\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetContacts}\n     */\n    this.getContactsFromList = function(listId, opts) {\n      return this.getContactsFromListWithHttpInfo(listId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Returns a folder's details\n     * @param {Number} folderId id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolder} and HTTP response\n     */\n    this.getFolderWithHttpInfo = function(folderId) {\n      var postBody = null;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling getFolder\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolder;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Returns a folder's details\n     * @param {Number} folderId id of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolder}\n     */\n    this.getFolder = function(folderId) {\n      return this.getFolderWithHttpInfo(folderId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolderLists} and HTTP response\n     */\n    this.getFolderListsWithHttpInfo = function(folderId, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling getFolderLists\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolderLists;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}/lists', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get lists in a folder\n     * @param {Number} folderId Id of the folder\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolderLists}\n     */\n    this.getFolderLists = function(folderId, opts) {\n      return this.getFolderListsWithHttpInfo(folderId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all folders\n     * @param {Number} limit Number of documents per page\n     * @param {Number} offset Index of the first document of the page\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetFolders} and HTTP response\n     */\n    this.getFoldersWithHttpInfo = function(limit, offset, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'limit' is set\n      if (limit === undefined || limit === null) {\n        throw new Error(\"Missing the required parameter 'limit' when calling getFolders\");\n      }\n\n      // verify the required parameter 'offset' is set\n      if (offset === undefined || offset === null) {\n        throw new Error(\"Missing the required parameter 'offset' when calling getFolders\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': limit,\n        'offset': offset,\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetFolders;\n\n      return this.apiClient.callApi(\n        '/contacts/folders', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all folders\n     * @param {Number} limit Number of documents per page\n     * @param {Number} offset Index of the first document of the page\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetFolders}\n     */\n    this.getFolders = function(limit, offset, opts) {\n      return this.getFoldersWithHttpInfo(limit, offset, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a list's details\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExtendedList} and HTTP response\n     */\n    this.getListWithHttpInfo = function(listId) {\n      var postBody = null;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling getList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetExtendedList;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a list's details\n     * @param {Number} listId Id of the list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExtendedList}\n     */\n    this.getList = function(listId) {\n      return this.getListWithHttpInfo(listId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all the lists\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetLists} and HTTP response\n     */\n    this.getListsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetLists;\n\n      return this.apiClient.callApi(\n        '/contacts/lists', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all the lists\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 10)\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetLists}\n     */\n    this.getLists = function(opts) {\n      return this.getListsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Import contacts\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input.\n     * @param {module:model/RequestContactImport} requestContactImport Values to import contacts in Sendinblue. To know more about the expected format, please have a look at ``https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response\n     */\n    this.importContactsWithHttpInfo = function(requestContactImport) {\n      var postBody = requestContactImport;\n\n      // verify the required parameter 'requestContactImport' is set\n      if (requestContactImport === undefined || requestContactImport === null) {\n        throw new Error(\"Missing the required parameter 'requestContactImport' when calling importContacts\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreatedProcessId;\n\n      return this.apiClient.callApi(\n        '/contacts/import', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Import contacts\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input.\n     * @param {module:model/RequestContactImport} requestContactImport Values to import contacts in Sendinblue. To know more about the expected format, please have a look at ``https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}\n     */\n    this.importContacts = function(requestContactImport) {\n      return this.importContactsWithHttpInfo(requestContactImport)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a contact from a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/RemoveContactFromList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostContactInfo} and HTTP response\n     */\n    this.removeContactFromListWithHttpInfo = function(listId, contactEmails) {\n      var postBody = contactEmails;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling removeContactFromList\");\n      }\n\n      // verify the required parameter 'contactEmails' is set\n      if (contactEmails === undefined || contactEmails === null) {\n        throw new Error(\"Missing the required parameter 'contactEmails' when calling removeContactFromList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = PostContactInfo;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}/contacts/remove', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a contact from a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/RemoveContactFromList} contactEmails Emails addresses OR IDs of the contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostContactInfo}\n     */\n    this.removeContactFromList = function(listId, contactEmails) {\n      return this.removeContactFromListWithHttpInfo(listId, contactEmails)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Export contacts\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.\n     * @param {module:model/RequestContactExport} requestContactExport Values to request a contact export\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response\n     */\n    this.requestContactExportWithHttpInfo = function(requestContactExport) {\n      var postBody = requestContactExport;\n\n      // verify the required parameter 'requestContactExport' is set\n      if (requestContactExport === undefined || requestContactExport === null) {\n        throw new Error(\"Missing the required parameter 'requestContactExport' when calling requestContactExport\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreatedProcessId;\n\n      return this.apiClient.callApi(\n        '/contacts/export', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Export contacts\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.\n     * @param {module:model/RequestContactExport} requestContactExport Values to request a contact export\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}\n     */\n    this.requestContactExport = function(requestContactExport) {\n      return this.requestContactExportWithHttpInfo(requestContactExport)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @param {module:model/UpdateAttribute} updateAttribute Values to update an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateAttributeWithHttpInfo = function(attributeCategory, attributeName, updateAttribute) {\n      var postBody = updateAttribute;\n\n      // verify the required parameter 'attributeCategory' is set\n      if (attributeCategory === undefined || attributeCategory === null) {\n        throw new Error(\"Missing the required parameter 'attributeCategory' when calling updateAttribute\");\n      }\n\n      // verify the required parameter 'attributeName' is set\n      if (attributeName === undefined || attributeName === null) {\n        throw new Error(\"Missing the required parameter 'attributeName' when calling updateAttribute\");\n      }\n\n      // verify the required parameter 'updateAttribute' is set\n      if (updateAttribute === undefined || updateAttribute === null) {\n        throw new Error(\"Missing the required parameter 'updateAttribute' when calling updateAttribute\");\n      }\n\n\n      var pathParams = {\n        'attributeCategory': attributeCategory,\n        'attributeName': attributeName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/attributes/{attributeCategory}/{attributeName}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update contact attribute\n     * @param {module:model/String} attributeCategory Category of the attribute\n     * @param {String} attributeName Name of the existing attribute\n     * @param {module:model/UpdateAttribute} updateAttribute Values to update an attribute\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateAttribute = function(attributeCategory, attributeName, updateAttribute) {\n      return this.updateAttributeWithHttpInfo(attributeCategory, attributeName, updateAttribute)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update multiple contacts\n     * @param {module:model/UpdateBatchContacts} updateBatchContacts Values to update multiple contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateBatchContactsWithHttpInfo = function(updateBatchContacts) {\n      var postBody = updateBatchContacts;\n\n      // verify the required parameter 'updateBatchContacts' is set\n      if (updateBatchContacts === undefined || updateBatchContacts === null) {\n        throw new Error(\"Missing the required parameter 'updateBatchContacts' when calling updateBatchContacts\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/batch', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update multiple contacts\n     * @param {module:model/UpdateBatchContacts} updateBatchContacts Values to update multiple contacts\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateBatchContacts = function(updateBatchContacts) {\n      return this.updateBatchContactsWithHttpInfo(updateBatchContacts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @param {module:model/UpdateContact} updateContact Values to update a contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateContactWithHttpInfo = function(identifier, updateContact) {\n      var postBody = updateContact;\n\n      // verify the required parameter 'identifier' is set\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling updateContact\");\n      }\n\n      // verify the required parameter 'updateContact' is set\n      if (updateContact === undefined || updateContact === null) {\n        throw new Error(\"Missing the required parameter 'updateContact' when calling updateContact\");\n      }\n\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/{identifier}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a contact\n     * @param {String} identifier Email (urlencoded) OR ID of the contact\n     * @param {module:model/UpdateContact} updateContact Values to update a contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateContact = function(identifier, updateContact) {\n      return this.updateContactWithHttpInfo(identifier, updateContact)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a folder\n     * @param {Number} folderId Id of the folder\n     * @param {module:model/CreateUpdateFolder} updateFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateFolderWithHttpInfo = function(folderId, updateFolder) {\n      var postBody = updateFolder;\n\n      // verify the required parameter 'folderId' is set\n      if (folderId === undefined || folderId === null) {\n        throw new Error(\"Missing the required parameter 'folderId' when calling updateFolder\");\n      }\n\n      // verify the required parameter 'updateFolder' is set\n      if (updateFolder === undefined || updateFolder === null) {\n        throw new Error(\"Missing the required parameter 'updateFolder' when calling updateFolder\");\n      }\n\n\n      var pathParams = {\n        'folderId': folderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/folders/{folderId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a folder\n     * @param {Number} folderId Id of the folder\n     * @param {module:model/CreateUpdateFolder} updateFolder Name of the folder\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateFolder = function(folderId, updateFolder) {\n      return this.updateFolderWithHttpInfo(folderId, updateFolder)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/UpdateList} updateList Values to update a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateListWithHttpInfo = function(listId, updateList) {\n      var postBody = updateList;\n\n      // verify the required parameter 'listId' is set\n      if (listId === undefined || listId === null) {\n        throw new Error(\"Missing the required parameter 'listId' when calling updateList\");\n      }\n\n      // verify the required parameter 'updateList' is set\n      if (updateList === undefined || updateList === null) {\n        throw new Error(\"Missing the required parameter 'updateList' when calling updateList\");\n      }\n\n\n      var pathParams = {\n        'listId': listId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/contacts/lists/{listId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a list\n     * @param {Number} listId Id of the list\n     * @param {module:model/UpdateList} updateList Values to update a list\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateList = function(listId, updateList) {\n      return this.updateListWithHttpInfo(listId, updateList)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1848, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1853, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/ConversationsApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/Body10', 'model/Body11', 'model/Body12', 'model/Body8', 'model/Body9', 'model/ConversationsMessage', 'model/ErrorModel'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/Body10'), require('../model/Body11'), require('../model/Body12'), require('../model/Body8'), require('../model/Body9'), require('../model/ConversationsMessage'), require('../model/ErrorModel'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.ConversationsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.Body10, root.SibApiV3Sdk.Body11, root.SibApiV3Sdk.Body12, root.SibApiV3Sdk.Body8, root.SibApiV3Sdk.Body9, root.SibApiV3Sdk.ConversationsMessage, root.SibApiV3Sdk.ErrorModel);\n  }\n}(this, function(ApiClient, Body10, Body11, Body12, Body8, Body9, ConversationsMessage, ErrorModel) {\n  'use strict';\n\n  /**\n   * Conversations service.\n   * @module api/ConversationsApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new ConversationsApi. \n   * @alias module:api/ConversationsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Sets agent’s status to online for 2-3 minutes\n     * We recommend pinging this endpoint every minute for as long as the agent has to be considered online.\n     * @param {module:model/Body12} body Agent fields.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.conversationsAgentOnlinePingPostWithHttpInfo = function(body) {\n      var postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling conversationsAgentOnlinePingPost\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/conversations/agentOnlinePing', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Sets agent’s status to online for 2-3 minutes\n     * We recommend pinging this endpoint every minute for as long as the agent has to be considered online.\n     * @param {module:model/Body12} body Agent fields.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.conversationsAgentOnlinePingPost = function(body) {\n      return this.conversationsAgentOnlinePingPostWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a message sent by an agent\n     * Only agents’ messages can be deleted.\n     * @param {String} id ID of the message\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.conversationsMessagesIdDeleteWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling conversationsMessagesIdDelete\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/conversations/messages/{id}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a message sent by an agent\n     * Only agents’ messages can be deleted.\n     * @param {String} id ID of the message\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.conversationsMessagesIdDelete = function(id) {\n      return this.conversationsMessagesIdDeleteWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a message\n     * @param {String} id ID of the message\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationsMessage} and HTTP response\n     */\n    this.conversationsMessagesIdGetWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling conversationsMessagesIdGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = ConversationsMessage;\n\n      return this.apiClient.callApi(\n        '/conversations/messages/{id}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a message\n     * @param {String} id ID of the message\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationsMessage}\n     */\n    this.conversationsMessagesIdGet = function(id) {\n      return this.conversationsMessagesIdGetWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a message sent by an agent\n     * Only agents’ messages can be edited.\n     * @param {String} id ID of the message\n     * @param {Object} opts Optional parameters\n     * @param {module:model/Body9} opts.body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationsMessage} and HTTP response\n     */\n    this.conversationsMessagesIdPutWithHttpInfo = function(id, opts) {\n      opts = opts || {};\n      var postBody = opts['body'];\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling conversationsMessagesIdPut\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = ConversationsMessage;\n\n      return this.apiClient.callApi(\n        '/conversations/messages/{id}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a message sent by an agent\n     * Only agents’ messages can be edited.\n     * @param {String} id ID of the message\n     * @param {Object} opts Optional parameters\n     * @param {module:model/Body9} opts.body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationsMessage}\n     */\n    this.conversationsMessagesIdPut = function(id, opts) {\n      return this.conversationsMessagesIdPutWithHttpInfo(id, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send a message as an agent\n     * @param {module:model/Body8} body Message fields.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationsMessage} and HTTP response\n     */\n    this.conversationsMessagesPostWithHttpInfo = function(body) {\n      var postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling conversationsMessagesPost\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = ConversationsMessage;\n\n      return this.apiClient.callApi(\n        '/conversations/messages', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send a message as an agent\n     * @param {module:model/Body8} body Message fields.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationsMessage}\n     */\n    this.conversationsMessagesPost = function(body) {\n      return this.conversationsMessagesPostWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an automated message\n     * @param {String} id ID of the message\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.conversationsPushedMessagesIdDeleteWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling conversationsPushedMessagesIdDelete\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/conversations/pushedMessages/{id}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an automated message\n     * @param {String} id ID of the message\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.conversationsPushedMessagesIdDelete = function(id) {\n      return this.conversationsPushedMessagesIdDeleteWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get an automated message\n     * @param {String} id ID of the message sent previously\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationsMessage} and HTTP response\n     */\n    this.conversationsPushedMessagesIdGetWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling conversationsPushedMessagesIdGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = ConversationsMessage;\n\n      return this.apiClient.callApi(\n        '/conversations/pushedMessages/{id}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get an automated message\n     * @param {String} id ID of the message sent previously\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationsMessage}\n     */\n    this.conversationsPushedMessagesIdGet = function(id) {\n      return this.conversationsPushedMessagesIdGetWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update an automated message\n     * @param {String} id ID of the message\n     * @param {module:model/Body11} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationsMessage} and HTTP response\n     */\n    this.conversationsPushedMessagesIdPutWithHttpInfo = function(id, body) {\n      var postBody = body;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling conversationsPushedMessagesIdPut\");\n      }\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling conversationsPushedMessagesIdPut\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = ConversationsMessage;\n\n      return this.apiClient.callApi(\n        '/conversations/pushedMessages/{id}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update an automated message\n     * @param {String} id ID of the message\n     * @param {module:model/Body11} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationsMessage}\n     */\n    this.conversationsPushedMessagesIdPut = function(id, body) {\n      return this.conversationsPushedMessagesIdPutWithHttpInfo(id, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send an automated message to a visitor\n     * Example of automated messages: order status, announce new features in your web app, etc.\n     * @param {module:model/Body10} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationsMessage} and HTTP response\n     */\n    this.conversationsPushedMessagesPostWithHttpInfo = function(body) {\n      var postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling conversationsPushedMessagesPost\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = ConversationsMessage;\n\n      return this.apiClient.callApi(\n        '/conversations/pushedMessages', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send an automated message to a visitor\n     * Example of automated messages: order status, announce new features in your web app, etc.\n     * @param {module:model/Body10} body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationsMessage}\n     */\n    this.conversationsPushedMessagesPost = function(body) {\n      return this.conversationsPushedMessagesPostWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2294, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2299, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/DealsApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/Body3', 'model/Body4', 'model/Body5', 'model/Deal', 'model/DealAttributes', 'model/DealsList', 'model/ErrorModel', 'model/InlineResponse201', 'model/Pipeline'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/Body3'), require('../model/Body4'), require('../model/Body5'), require('../model/Deal'), require('../model/DealAttributes'), require('../model/DealsList'), require('../model/ErrorModel'), require('../model/InlineResponse201'), require('../model/Pipeline'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.DealsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.Body3, root.SibApiV3Sdk.Body4, root.SibApiV3Sdk.Body5, root.SibApiV3Sdk.Deal, root.SibApiV3Sdk.DealAttributes, root.SibApiV3Sdk.DealsList, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.InlineResponse201, root.SibApiV3Sdk.Pipeline);\n  }\n}(this, function(ApiClient, Body3, Body4, Body5, Deal, DealAttributes, DealsList, ErrorModel, InlineResponse201, Pipeline) {\n  'use strict';\n\n  /**\n   * Deals service.\n   * @module api/DealsApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new DealsApi. \n   * @alias module:api/DealsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Get deal attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DealAttributes} and HTTP response\n     */\n    this.crmAttributesDealsGetWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = DealAttributes;\n\n      return this.apiClient.callApi(\n        '/crm/attributes/deals', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get deal attributes\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DealAttributes}\n     */\n    this.crmAttributesDealsGet = function() {\n      return this.crmAttributesDealsGetWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all deals\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.filtersAttributes Filter by attrbutes. If you have filter for owner on your side please send it as `attributes.owner`.\\\"\n     * @param {String} opts.filtersLinkedCompaniesIds Filter by linked companies ids\n     * @param {String} opts.filtersLinkedContactsIds Filter by linked companies ids\n     * @param {Number} opts.offset Index of the first document of the page\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed\n     * @param {String} opts.sortBy The field used to sort field names.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DealsList} and HTTP response\n     */\n    this.crmDealsGetWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'filters[attributes]': opts['filtersAttributes'],\n        'filters[linkedCompaniesIds]': opts['filtersLinkedCompaniesIds'],\n        'filters[linkedContactsIds]': opts['filtersLinkedContactsIds'],\n        'offset': opts['offset'],\n        'limit': opts['limit'],\n        'sort': opts['sort'],\n        'sortBy': opts['sortBy'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = DealsList;\n\n      return this.apiClient.callApi(\n        '/crm/deals', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all deals\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.filtersAttributes Filter by attrbutes. If you have filter for owner on your side please send it as `attributes.owner`.\\\"\n     * @param {String} opts.filtersLinkedCompaniesIds Filter by linked companies ids\n     * @param {String} opts.filtersLinkedContactsIds Filter by linked companies ids\n     * @param {Number} opts.offset Index of the first document of the page\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed\n     * @param {String} opts.sortBy The field used to sort field names.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DealsList}\n     */\n    this.crmDealsGet = function(opts) {\n      return this.crmDealsGetWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a deal\n     * @param {String} id \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.crmDealsIdDeleteWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmDealsIdDelete\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/crm/deals/{id}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a deal\n     * @param {String} id \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.crmDealsIdDelete = function(id) {\n      return this.crmDealsIdDeleteWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a deal\n     * @param {String} id \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Deal} and HTTP response\n     */\n    this.crmDealsIdGetWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmDealsIdGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = Deal;\n\n      return this.apiClient.callApi(\n        '/crm/deals/{id}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a deal\n     * @param {String} id \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Deal}\n     */\n    this.crmDealsIdGet = function(id) {\n      return this.crmDealsIdGetWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a deal\n     * @param {String} id \n     * @param {module:model/Body4} body Updated deal details.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.crmDealsIdPatchWithHttpInfo = function(id, body) {\n      var postBody = body;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmDealsIdPatch\");\n      }\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling crmDealsIdPatch\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/crm/deals/{id}', 'PATCH',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a deal\n     * @param {String} id \n     * @param {module:model/Body4} body Updated deal details.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.crmDealsIdPatch = function(id, body) {\n      return this.crmDealsIdPatchWithHttpInfo(id, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Link and Unlink a deal with contacts and companies\n     * @param {String} id \n     * @param {module:model/Body5} body Linked / Unlinked contacts and companies ids.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.crmDealsLinkUnlinkIdPatchWithHttpInfo = function(id, body) {\n      var postBody = body;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmDealsLinkUnlinkIdPatch\");\n      }\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling crmDealsLinkUnlinkIdPatch\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/crm/deals/link-unlink/{id}', 'PATCH',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Link and Unlink a deal with contacts and companies\n     * @param {String} id \n     * @param {module:model/Body5} body Linked / Unlinked contacts and companies ids.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.crmDealsLinkUnlinkIdPatch = function(id, body) {\n      return this.crmDealsLinkUnlinkIdPatchWithHttpInfo(id, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a deal\n     * @param {module:model/Body3} body Deal create data.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse201} and HTTP response\n     */\n    this.crmDealsPostWithHttpInfo = function(body) {\n      var postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling crmDealsPost\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse201;\n\n      return this.apiClient.callApi(\n        '/crm/deals', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a deal\n     * @param {module:model/Body3} body Deal create data.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse201}\n     */\n    this.crmDealsPost = function(body) {\n      return this.crmDealsPostWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get pipeline stages\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pipeline} and HTTP response\n     */\n    this.crmPipelineDetailsGetWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = Pipeline;\n\n      return this.apiClient.callApi(\n        '/crm/pipeline/details', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get pipeline stages\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pipeline}\n     */\n    this.crmPipelineDetailsGet = function() {\n      return this.crmPipelineDetailsGetWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcC,GAEA,CAAA,SAAS,IAAI,EAAE,OAAO;IACrB,IAAI,OAAO,WAAW,cAAc,OAAO,GAAG,EAAE;QAC9C,wCAAwC;QACxC,wDAA6L;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAC/L,OAAO,IAAI,+CAAkB,YAAY,OAAO,OAAO,EAAE;QACvD,qEAAqE;QACrE,OAAO,OAAO,GAAG;IACnB,OAAO;QACL,mCAAmC;QACnC,IAAI,CAAC,KAAK,WAAW,EAAE;YACrB,KAAK,WAAW,GAAG,CAAC;QACtB;QACA,KAAK,WAAW,CAAC,QAAQ,GAAG,QAAQ,KAAK,WAAW,CAAC,SAAS,EAAE,KAAK,WAAW,CAAC,KAAK,EAAE,KAAK,WAAW,CAAC,KAAK,EAAE,KAAK,WAAW,CAAC,KAAK,EAAE,KAAK,WAAW,CAAC,IAAI,EAAE,KAAK,WAAW,CAAC,cAAc,EAAE,KAAK,WAAW,CAAC,SAAS,EAAE,KAAK,WAAW,CAAC,UAAU,EAAE,KAAK,WAAW,CAAC,iBAAiB,EAAE,KAAK,WAAW,CAAC,QAAQ;IACxT;AACF,CAAA,EAAE,IAAI,EAAE,SAAS,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,UAAU,EAAE,iBAAiB,EAAE,QAAQ;IACvH;IAEA;;;;GAIC,GAED;;;;;;GAMC,GACD,IAAI,UAAU,SAAS,SAAS;QAC9B,IAAI,CAAC,SAAS,GAAG,aAAa,UAAU,QAAQ;QAIhD;;;KAGC,GACD,IAAI,CAAC,iCAAiC,GAAG;YACvC,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,yBAAyB,OACzB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;KAGC,GACD,IAAI,CAAC,qBAAqB,GAAG;YAC3B,OAAO,IAAI,CAAC,iCAAiC,GAC1C,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;;;;;;KAWC,GACD,IAAI,CAAC,uBAAuB,GAAG,SAAS,IAAI;YAC1C,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc;gBAChB,uBAAuB,IAAI,CAAC,oBAAoB;gBAChD,+BAA+B,IAAI,CAAC,4BAA4B;gBAChE,8BAA8B,IAAI,CAAC,2BAA2B;gBAC9D,UAAU,IAAI,CAAC,SAAS;gBACxB,SAAS,IAAI,CAAC,QAAQ;gBACtB,QAAQ,IAAI,CAAC,OAAO;gBACpB,UAAU,IAAI,CAAC,SAAS;YAC1B;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,cAAc,OACd,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;;;;;;KAWC,GACD,IAAI,CAAC,WAAW,GAAG,SAAS,IAAI;YAC9B,OAAO,IAAI,CAAC,uBAAuB,CAAC,MACjC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,4BAA4B,GAAG,SAAS,EAAE;YAC7C,IAAI,WAAW;YAEf,4CAA4C;YAC5C,IAAI,OAAO,aAAa,OAAO,MAAM;gBACnC,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,MAAM;YACR;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,mBAAmB,UACnB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,gBAAgB,GAAG,SAAS,EAAE;YACjC,OAAO,IAAI,CAAC,4BAA4B,CAAC,IACtC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,yBAAyB,GAAG,SAAS,EAAE;YAC1C,IAAI,WAAW;YAEf,4CAA4C;YAC5C,IAAI,OAAO,aAAa,OAAO,MAAM;gBACnC,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,MAAM;YACR;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,mBAAmB,OACnB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,aAAa,GAAG,SAAS,EAAE;YAC9B,OAAO,IAAI,CAAC,yBAAyB,CAAC,IACnC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;KAKC,GACD,IAAI,CAAC,2BAA2B,GAAG,SAAS,EAAE,EAAE,IAAI;YAClD,IAAI,WAAW;YAEf,4CAA4C;YAC5C,IAAI,OAAO,aAAa,OAAO,MAAM;gBACnC,MAAM,IAAI,MAAM;YAClB;YAEA,8CAA8C;YAC9C,IAAI,SAAS,aAAa,SAAS,MAAM;gBACvC,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,MAAM;YACR;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,mBAAmB,SACnB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;KAKC,GACD,IAAI,CAAC,eAAe,GAAG,SAAS,EAAE,EAAE,IAAI;YACtC,OAAO,IAAI,CAAC,2BAA2B,CAAC,IAAI,MACzC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;KAKC,GACD,IAAI,CAAC,qCAAqC,GAAG,SAAS,EAAE,EAAE,IAAI;YAC5D,IAAI,WAAW;YAEf,4CAA4C;YAC5C,IAAI,OAAO,aAAa,OAAO,MAAM;gBACnC,MAAM,IAAI,MAAM;YAClB;YAEA,8CAA8C;YAC9C,IAAI,SAAS,aAAa,SAAS,MAAM;gBACvC,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,MAAM;YACR;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,+BAA+B,SAC/B,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;KAKC,GACD,IAAI,CAAC,yBAAyB,GAAG,SAAS,EAAE,EAAE,IAAI;YAChD,OAAO,IAAI,CAAC,qCAAqC,CAAC,IAAI,MACnD,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,wBAAwB,GAAG,SAAS,IAAI;YAC3C,IAAI,WAAW;YAEf,8CAA8C;YAC9C,IAAI,SAAS,aAAa,SAAS,MAAM;gBACvC,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa,CACjB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,cAAc,QACd,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,YAAY,GAAG,SAAS,IAAI;YAC/B,OAAO,IAAI,CAAC,wBAAwB,CAAC,MAClC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;KAGC,GACD,IAAI,CAAC,iCAAiC,GAAG;YACvC,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,yBAAyB,OACzB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;KAGC,GACD,IAAI,CAAC,qBAAqB,GAAG;YAC3B,OAAO,IAAI,CAAC,iCAAiC,GAC1C,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;IACF;IAEA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 2707, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2712, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/EmailCampaignsApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/AbTestCampaignResult', 'model/CreateEmailCampaign', 'model/CreateModel', 'model/CreatedProcessId', 'model/EmailExportRecipients', 'model/ErrorModel', 'model/GetEmailCampaign', 'model/GetEmailCampaigns', 'model/GetSharedTemplateUrl', 'model/PostSendFailed', 'model/SendReport', 'model/SendTestEmail', 'model/UpdateCampaignStatus', 'model/UpdateEmailCampaign', 'model/UploadImageModel', 'model/UploadImageToGallery'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/AbTestCampaignResult'), require('../model/CreateEmailCampaign'), require('../model/CreateModel'), require('../model/CreatedProcessId'), require('../model/EmailExportRecipients'), require('../model/ErrorModel'), require('../model/GetEmailCampaign'), require('../model/GetEmailCampaigns'), require('../model/GetSharedTemplateUrl'), require('../model/PostSendFailed'), require('../model/SendReport'), require('../model/SendTestEmail'), require('../model/UpdateCampaignStatus'), require('../model/UpdateEmailCampaign'), require('../model/UploadImageModel'), require('../model/UploadImageToGallery'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.EmailCampaignsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AbTestCampaignResult, root.SibApiV3Sdk.CreateEmailCampaign, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreatedProcessId, root.SibApiV3Sdk.EmailExportRecipients, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetEmailCampaign, root.SibApiV3Sdk.GetEmailCampaigns, root.SibApiV3Sdk.GetSharedTemplateUrl, root.SibApiV3Sdk.PostSendFailed, root.SibApiV3Sdk.SendReport, root.SibApiV3Sdk.SendTestEmail, root.SibApiV3Sdk.UpdateCampaignStatus, root.SibApiV3Sdk.UpdateEmailCampaign, root.SibApiV3Sdk.UploadImageModel, root.SibApiV3Sdk.UploadImageToGallery);\n  }\n}(this, function(ApiClient, AbTestCampaignResult, CreateEmailCampaign, CreateModel, CreatedProcessId, EmailExportRecipients, ErrorModel, GetEmailCampaign, GetEmailCampaigns, GetSharedTemplateUrl, PostSendFailed, SendReport, SendTestEmail, UpdateCampaignStatus, UpdateEmailCampaign, UploadImageModel, UploadImageToGallery) {\n  'use strict';\n\n  /**\n   * EmailCampaigns service.\n   * @module api/EmailCampaignsApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new EmailCampaignsApi. \n   * @alias module:api/EmailCampaignsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Create an email campaign\n     * @param {module:model/CreateEmailCampaign} emailCampaigns Values to create a campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createEmailCampaignWithHttpInfo = function(emailCampaigns) {\n      var postBody = emailCampaigns;\n\n      // verify the required parameter 'emailCampaigns' is set\n      if (emailCampaigns === undefined || emailCampaigns === null) {\n        throw new Error(\"Missing the required parameter 'emailCampaigns' when calling createEmailCampaign\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create an email campaign\n     * @param {module:model/CreateEmailCampaign} emailCampaigns Values to create a campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createEmailCampaign = function(emailCampaigns) {\n      return this.createEmailCampaignWithHttpInfo(emailCampaigns)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an email campaign\n     * @param {Number} campaignId id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteEmailCampaignWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling deleteEmailCampaign\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an email campaign\n     * @param {Number} campaignId id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteEmailCampaign = function(campaignId) {\n      return this.deleteEmailCampaignWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Export the recipients of an email campaign\n     * @param {Number} campaignId Id of the campaign\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EmailExportRecipients} opts.recipientExport Values to send for a recipient export request\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response\n     */\n    this.emailExportRecipientsWithHttpInfo = function(campaignId, opts) {\n      opts = opts || {};\n      var postBody = opts['recipientExport'];\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling emailExportRecipients\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreatedProcessId;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/exportRecipients', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Export the recipients of an email campaign\n     * @param {Number} campaignId Id of the campaign\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EmailExportRecipients} opts.recipientExport Values to send for a recipient export request\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}\n     */\n    this.emailExportRecipients = function(campaignId, opts) {\n      return this.emailExportRecipientsWithHttpInfo(campaignId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get an A/B test email campaign results\n     * Obtain winning version of an A/B test email campaign\n     * @param {Number} campaignId Id of the A/B test campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbTestCampaignResult} and HTTP response\n     */\n    this.getAbTestCampaignResultWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling getAbTestCampaignResult\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = AbTestCampaignResult;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/abTestCampaignResult', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get an A/B test email campaign results\n     * Obtain winning version of an A/B test email campaign\n     * @param {Number} campaignId Id of the A/B test campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbTestCampaignResult}\n     */\n    this.getAbTestCampaignResult = function(campaignId) {\n      return this.getAbTestCampaignResultWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get an email campaign report\n     * @param {Number} campaignId Id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEmailCampaign} and HTTP response\n     */\n    this.getEmailCampaignWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling getEmailCampaign\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetEmailCampaign;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get an email campaign report\n     * @param {Number} campaignId Id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEmailCampaign}\n     */\n    this.getEmailCampaign = function(campaignId) {\n      return this.getEmailCampaignWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return JSON.parse(response_and_data.response.text);\n        });\n    }\n\n\n    /**\n     * Return all your created email campaigns\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.type Filter on the type of the campaigns\n     * @param {module:model/String} opts.status Filter on the status of the campaign\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEmailCampaigns} and HTTP response\n     */\n    this.getEmailCampaignsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'type': opts['type'],\n        'status': opts['status'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetEmailCampaigns;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Return all your created email campaigns\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.type Filter on the type of the campaigns\n     * @param {module:model/String} opts.status Filter on the status of the campaign\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEmailCampaigns}\n     */\n    this.getEmailCampaigns = function(opts) {\n      return this.getEmailCampaignsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a shared template url\n     * Get a unique URL to share & import an email template from one Sendinblue account to another.\n     * @param {Number} campaignId Id of the campaign or template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSharedTemplateUrl} and HTTP response\n     */\n    this.getSharedTemplateUrlWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling getSharedTemplateUrl\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSharedTemplateUrl;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/sharedUrl', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a shared template url\n     * Get a unique URL to share & import an email template from one Sendinblue account to another.\n     * @param {Number} campaignId Id of the campaign or template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSharedTemplateUrl}\n     */\n    this.getSharedTemplateUrl = function(campaignId) {\n      return this.getSharedTemplateUrlWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send an email campaign immediately, based on campaignId\n     * @param {Number} campaignId Id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendEmailCampaignNowWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendEmailCampaignNow\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/sendNow', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send an email campaign immediately, based on campaignId\n     * @param {Number} campaignId Id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendEmailCampaignNow = function(campaignId) {\n      return this.sendEmailCampaignNowWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send the report of a campaign\n     * A PDF will be sent to the specified email addresses\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/SendReport} sendReport Values for send a report\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendReportWithHttpInfo = function(campaignId, sendReport) {\n      var postBody = sendReport;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendReport\");\n      }\n\n      // verify the required parameter 'sendReport' is set\n      if (sendReport === undefined || sendReport === null) {\n        throw new Error(\"Missing the required parameter 'sendReport' when calling sendReport\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/sendReport', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send the report of a campaign\n     * A PDF will be sent to the specified email addresses\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/SendReport} sendReport Values for send a report\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendReport = function(campaignId, sendReport) {\n      return this.sendReportWithHttpInfo(campaignId, sendReport)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send an email campaign to your test list\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/SendTestEmail} emailTo \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendTestEmailWithHttpInfo = function(campaignId, emailTo) {\n      var postBody = emailTo;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendTestEmail\");\n      }\n\n      // verify the required parameter 'emailTo' is set\n      if (emailTo === undefined || emailTo === null) {\n        throw new Error(\"Missing the required parameter 'emailTo' when calling sendTestEmail\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/sendTest', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send an email campaign to your test list\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/SendTestEmail} emailTo \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendTestEmail = function(campaignId, emailTo) {\n      return this.sendTestEmailWithHttpInfo(campaignId, emailTo)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update an email campaign status\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/UpdateCampaignStatus} status Status of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateCampaignStatusWithHttpInfo = function(campaignId, status) {\n      var postBody = status;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling updateCampaignStatus\");\n      }\n\n      // verify the required parameter 'status' is set\n      if (status === undefined || status === null) {\n        throw new Error(\"Missing the required parameter 'status' when calling updateCampaignStatus\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}/status', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update an email campaign status\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/UpdateCampaignStatus} status Status of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateCampaignStatus = function(campaignId, status) {\n      return this.updateCampaignStatusWithHttpInfo(campaignId, status)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update an email campaign\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/UpdateEmailCampaign} emailCampaign Values to update a campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateEmailCampaignWithHttpInfo = function(campaignId, emailCampaign) {\n      var postBody = emailCampaign;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling updateEmailCampaign\");\n      }\n\n      // verify the required parameter 'emailCampaign' is set\n      if (emailCampaign === undefined || emailCampaign === null) {\n        throw new Error(\"Missing the required parameter 'emailCampaign' when calling updateEmailCampaign\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/{campaignId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update an email campaign\n     * @param {Number} campaignId Id of the campaign\n     * @param {module:model/UpdateEmailCampaign} emailCampaign Values to update a campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateEmailCampaign = function(campaignId, emailCampaign) {\n      return this.updateEmailCampaignWithHttpInfo(campaignId, emailCampaign)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Upload an image to your account's image gallery\n     * @param {module:model/UploadImageToGallery} uploadImage Parameters to upload an image\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadImageModel} and HTTP response\n     */\n    this.uploadImageToGalleryWithHttpInfo = function(uploadImage) {\n      var postBody = uploadImage;\n\n      // verify the required parameter 'uploadImage' is set\n      if (uploadImage === undefined || uploadImage === null) {\n        throw new Error(\"Missing the required parameter 'uploadImage' when calling uploadImageToGallery\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = UploadImageModel;\n\n      return this.apiClient.callApi(\n        '/emailCampaigns/images', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Upload an image to your account's image gallery\n     * @param {module:model/UploadImageToGallery} uploadImage Parameters to upload an image\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadImageModel}\n     */\n    this.uploadImageToGallery = function(uploadImage) {\n      return this.uploadImageToGalleryWithHttpInfo(uploadImage)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3380, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3385, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/FilesApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/ErrorModel', 'model/FileData', 'model/FileDownloadableLink', 'model/FileList'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/FileData'), require('../model/FileDownloadableLink'), require('../model/FileList'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.FilesApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.FileData, root.SibApiV3Sdk.FileDownloadableLink, root.SibApiV3Sdk.FileList);\n  }\n}(this, function(ApiClient, ErrorModel, FileData, FileDownloadableLink, FileList) {\n  'use strict';\n\n  /**\n   * Files service.\n   * @module api/FilesApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new FilesApi. \n   * @alias module:api/FilesApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Get all files\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.entity Filter by file entity type\n     * @param {String} opts.entityIds Filter by file entity IDs\n     * @param {Number} opts.dateFrom dateFrom to date range filter type (timestamp in milliseconds)\n     * @param {Number} opts.dateTo dateTo to date range filter type (timestamp in milliseconds)\n     * @param {Number} opts.offset Index of the first document of the page\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileList} and HTTP response\n     */\n    this.crmFilesGetWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'entity': opts['entity'],\n        'entityIds': opts['entityIds'],\n        'dateFrom': opts['dateFrom'],\n        'dateTo': opts['dateTo'],\n        'offset': opts['offset'],\n        'limit': opts['limit'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = FileList;\n\n      return this.apiClient.callApi(\n        '/crm/files', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all files\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.entity Filter by file entity type\n     * @param {String} opts.entityIds Filter by file entity IDs\n     * @param {Number} opts.dateFrom dateFrom to date range filter type (timestamp in milliseconds)\n     * @param {Number} opts.dateTo dateTo to date range filter type (timestamp in milliseconds)\n     * @param {Number} opts.offset Index of the first document of the page\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileList}\n     */\n    this.crmFilesGet = function(opts) {\n      return this.crmFilesGetWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get file details\n     * @param {String} id File id to get file data.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileData} and HTTP response\n     */\n    this.crmFilesIdDataGetWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmFilesIdDataGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = FileData;\n\n      return this.apiClient.callApi(\n        '/crm/files/{id}/data', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get file details\n     * @param {String} id File id to get file data.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileData}\n     */\n    this.crmFilesIdDataGet = function(id) {\n      return this.crmFilesIdDataGetWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a file\n     * @param {String} id File id to delete.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.crmFilesIdDeleteWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmFilesIdDelete\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/crm/files/{id}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a file\n     * @param {String} id File id to delete.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.crmFilesIdDelete = function(id) {\n      return this.crmFilesIdDeleteWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Download a file\n     * @param {String} id File id to download.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileDownloadableLink} and HTTP response\n     */\n    this.crmFilesIdGetWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmFilesIdGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = FileDownloadableLink;\n\n      return this.apiClient.callApi(\n        '/crm/files/{id}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Download a file\n     * @param {String} id File id to download.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileDownloadableLink}\n     */\n    this.crmFilesIdGet = function(id) {\n      return this.crmFilesIdGetWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Upload a file\n     * @param {File} file File data to create a file.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.dealId Deal id linked to a file\n     * @param {Number} opts.contactId Contact id linked to a file\n     * @param {String} opts.companyId Company id linked to a file\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileData} and HTTP response\n     */\n    this.crmFilesPostWithHttpInfo = function(file, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'file' is set\n      if (file === undefined || file === null) {\n        throw new Error(\"Missing the required parameter 'file' when calling crmFilesPost\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n        'file': file,\n        'dealId': opts['dealId'],\n        'contactId': opts['contactId'],\n        'companyId': opts['companyId']\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['multipart/form-data'];\n      var accepts = ['application/json'];\n      var returnType = FileData;\n\n      return this.apiClient.callApi(\n        '/crm/files', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Upload a file\n     * @param {File} file File data to create a file.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.dealId Deal id linked to a file\n     * @param {Number} opts.contactId Contact id linked to a file\n     * @param {String} opts.companyId Company id linked to a file\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileData}\n     */\n    this.crmFilesPost = function(file, opts) {\n      return this.crmFilesPostWithHttpInfo(file, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3674, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3679, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/InboundParsingApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/ErrorModel', 'model/GetInboundEmailEvents', 'model/GetInboundEmailEventsByUuid'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/GetInboundEmailEvents'), require('../model/GetInboundEmailEventsByUuid'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.InboundParsingApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetInboundEmailEvents, root.SibApiV3Sdk.GetInboundEmailEventsByUuid);\n  }\n}(this, function(ApiClient, ErrorModel, GetInboundEmailEvents, GetInboundEmailEventsByUuid) {\n  'use strict';\n\n  /**\n   * InboundParsing service.\n   * @module api/InboundParsingApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new InboundParsingApi. \n   * @alias module:api/InboundParsingApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Retrieve inbound attachment with download token.\n     * This endpoint will retrieve inbound attachment with download token.\n     * @param {String} downloadToken Token to fetch a particular attachment\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response\n     */\n    this.getInboundEmailAttachmentWithHttpInfo = function(downloadToken) {\n      var postBody = null;\n\n      // verify the required parameter 'downloadToken' is set\n      if (downloadToken === undefined || downloadToken === null) {\n        throw new Error(\"Missing the required parameter 'downloadToken' when calling getInboundEmailAttachment\");\n      }\n\n\n      var pathParams = {\n        'downloadToken': downloadToken\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = File;\n\n      return this.apiClient.callApi(\n        '/inbound/attachments/{downloadToken}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Retrieve inbound attachment with download token.\n     * This endpoint will retrieve inbound attachment with download token.\n     * @param {String} downloadToken Token to fetch a particular attachment\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}\n     */\n    this.getInboundEmailAttachment = function(downloadToken) {\n      return this.getInboundEmailAttachmentWithHttpInfo(downloadToken)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of all the events for the received emails.\n     * This endpoint will show the list of all the events for the received emails.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.sender Email address of the sender.\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {Number} opts.limit Number of documents returned per page (default to 100)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetInboundEmailEvents} and HTTP response\n     */\n    this.getInboundEmailEventsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'sender': opts['sender'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetInboundEmailEvents;\n\n      return this.apiClient.callApi(\n        '/inbound/events', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of all the events for the received emails.\n     * This endpoint will show the list of all the events for the received emails.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.sender Email address of the sender.\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {Number} opts.limit Number of documents returned per page (default to 100)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetInboundEmailEvents}\n     */\n    this.getInboundEmailEvents = function(opts) {\n      return this.getInboundEmailEventsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Fetch all events history for one particular received email.\n     * This endpoint will show the list of all events history for one particular received email.\n     * @param {String} uuid UUID to fetch events specific to recieved email\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetInboundEmailEventsByUuid} and HTTP response\n     */\n    this.getInboundEmailEventsByUuidWithHttpInfo = function(uuid) {\n      var postBody = null;\n\n      // verify the required parameter 'uuid' is set\n      if (uuid === undefined || uuid === null) {\n        throw new Error(\"Missing the required parameter 'uuid' when calling getInboundEmailEventsByUuid\");\n      }\n\n\n      var pathParams = {\n        'uuid': uuid\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetInboundEmailEventsByUuid;\n\n      return this.apiClient.callApi(\n        '/inbound/events/{uuid}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Fetch all events history for one particular received email.\n     * This endpoint will show the list of all events history for one particular received email.\n     * @param {String} uuid UUID to fetch events specific to recieved email\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetInboundEmailEventsByUuid}\n     */\n    this.getInboundEmailEventsByUuid = function(uuid) {\n      return this.getInboundEmailEventsByUuidWithHttpInfo(uuid)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3877, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3882, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/MasterAccountApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/CreateSubAccount', 'model/CreateSubAccountResponse', 'model/ErrorModel', 'model/GetSsoToken', 'model/MasterDetailsResponse', 'model/SsoTokenRequest', 'model/SubAccountDetailsResponse', 'model/SubAccountUpdatePlanRequest', 'model/SubAccountsResponse'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/CreateSubAccount'), require('../model/CreateSubAccountResponse'), require('../model/ErrorModel'), require('../model/GetSsoToken'), require('../model/MasterDetailsResponse'), require('../model/SsoTokenRequest'), require('../model/SubAccountDetailsResponse'), require('../model/SubAccountUpdatePlanRequest'), require('../model/SubAccountsResponse'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.MasterAccountApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateSubAccount, root.SibApiV3Sdk.CreateSubAccountResponse, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetSsoToken, root.SibApiV3Sdk.MasterDetailsResponse, root.SibApiV3Sdk.SsoTokenRequest, root.SibApiV3Sdk.SubAccountDetailsResponse, root.SibApiV3Sdk.SubAccountUpdatePlanRequest, root.SibApiV3Sdk.SubAccountsResponse);\n  }\n}(this, function(ApiClient, CreateSubAccount, CreateSubAccountResponse, ErrorModel, GetSsoToken, MasterDetailsResponse, SsoTokenRequest, SubAccountDetailsResponse, SubAccountUpdatePlanRequest, SubAccountsResponse) {\n  'use strict';\n\n  /**\n   * MasterAccount service.\n   * @module api/MasterAccountApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new MasterAccountApi. \n   * @alias module:api/MasterAccountApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Get the details of requested master account\n     * This endpoint will provide the details of the master account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MasterDetailsResponse} and HTTP response\n     */\n    this.corporateMasterAccountGetWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = MasterDetailsResponse;\n\n      return this.apiClient.callApi(\n        '/corporate/masterAccount', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the details of requested master account\n     * This endpoint will provide the details of the master account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MasterDetailsResponse}\n     */\n    this.corporateMasterAccountGet = function() {\n      return this.corporateMasterAccountGetWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of all the sub-accounts of the master account.\n     * This endpoint will provide the list all the sub-accounts of the master account.\n     * @param {Number} offset Index of the first sub-account in the page\n     * @param {Number} limit Number of sub-accounts to be displayed on each page\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubAccountsResponse} and HTTP response\n     */\n    this.corporateSubAccountGetWithHttpInfo = function(offset, limit) {\n      var postBody = null;\n\n      // verify the required parameter 'offset' is set\n      if (offset === undefined || offset === null) {\n        throw new Error(\"Missing the required parameter 'offset' when calling corporateSubAccountGet\");\n      }\n\n      // verify the required parameter 'limit' is set\n      if (limit === undefined || limit === null) {\n        throw new Error(\"Missing the required parameter 'limit' when calling corporateSubAccountGet\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'offset': offset,\n        'limit': limit,\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = SubAccountsResponse;\n\n      return this.apiClient.callApi(\n        '/corporate/subAccount', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of all the sub-accounts of the master account.\n     * This endpoint will provide the list all the sub-accounts of the master account.\n     * @param {Number} offset Index of the first sub-account in the page\n     * @param {Number} limit Number of sub-accounts to be displayed on each page\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubAccountsResponse}\n     */\n    this.corporateSubAccountGet = function(offset, limit) {\n      return this.corporateSubAccountGetWithHttpInfo(offset, limit)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a sub-account\n     * @param {Number} id Id of the sub-account organization to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.corporateSubAccountIdDeleteWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling corporateSubAccountIdDelete\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/corporate/subAccount/{id}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a sub-account\n     * @param {Number} id Id of the sub-account organization to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.corporateSubAccountIdDelete = function(id) {\n      return this.corporateSubAccountIdDeleteWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get sub-account details\n     * This endpoint will provide the details for the specified sub-account company\n     * @param {Number} id Id of the sub-account organization\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubAccountDetailsResponse} and HTTP response\n     */\n    this.corporateSubAccountIdGetWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling corporateSubAccountIdGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = SubAccountDetailsResponse;\n\n      return this.apiClient.callApi(\n        '/corporate/subAccount/{id}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get sub-account details\n     * This endpoint will provide the details for the specified sub-account company\n     * @param {Number} id Id of the sub-account organization\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubAccountDetailsResponse}\n     */\n    this.corporateSubAccountIdGet = function(id) {\n      return this.corporateSubAccountIdGetWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update sub-account plan\n     * This endpoint will update the sub-account plan\n     * @param {Number} id Id of the sub-account organization\n     * @param {module:model/SubAccountUpdatePlanRequest} updatePlanDetails Values to update a sub-account plan\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.corporateSubAccountIdPlanPutWithHttpInfo = function(id, updatePlanDetails) {\n      var postBody = updatePlanDetails;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling corporateSubAccountIdPlanPut\");\n      }\n\n      // verify the required parameter 'updatePlanDetails' is set\n      if (updatePlanDetails === undefined || updatePlanDetails === null) {\n        throw new Error(\"Missing the required parameter 'updatePlanDetails' when calling corporateSubAccountIdPlanPut\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/corporate/subAccount/{id}/plan', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update sub-account plan\n     * This endpoint will update the sub-account plan\n     * @param {Number} id Id of the sub-account organization\n     * @param {module:model/SubAccountUpdatePlanRequest} updatePlanDetails Values to update a sub-account plan\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.corporateSubAccountIdPlanPut = function(id, updatePlanDetails) {\n      return this.corporateSubAccountIdPlanPutWithHttpInfo(id, updatePlanDetails)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a new sub-account under a master account.\n     * This endpoint will create a new sub-account under a master account\n     * @param {module:model/CreateSubAccount} subAccountCreate values to create new sub-account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSubAccountResponse} and HTTP response\n     */\n    this.corporateSubAccountPostWithHttpInfo = function(subAccountCreate) {\n      var postBody = subAccountCreate;\n\n      // verify the required parameter 'subAccountCreate' is set\n      if (subAccountCreate === undefined || subAccountCreate === null) {\n        throw new Error(\"Missing the required parameter 'subAccountCreate' when calling corporateSubAccountPost\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateSubAccountResponse;\n\n      return this.apiClient.callApi(\n        '/corporate/subAccount', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a new sub-account under a master account.\n     * This endpoint will create a new sub-account under a master account\n     * @param {module:model/CreateSubAccount} subAccountCreate values to create new sub-account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSubAccountResponse}\n     */\n    this.corporateSubAccountPost = function(subAccountCreate) {\n      return this.corporateSubAccountPostWithHttpInfo(subAccountCreate)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Generate SSO token to access Sendinblue\n     * This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.sendinblue.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.\n     * @param {module:model/SsoTokenRequest} ssoTokenRequest Values to generate SSO token for sub-account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSsoToken} and HTTP response\n     */\n    this.corporateSubAccountSsoTokenPostWithHttpInfo = function(ssoTokenRequest) {\n      var postBody = ssoTokenRequest;\n\n      // verify the required parameter 'ssoTokenRequest' is set\n      if (ssoTokenRequest === undefined || ssoTokenRequest === null) {\n        throw new Error(\"Missing the required parameter 'ssoTokenRequest' when calling corporateSubAccountSsoTokenPost\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSsoToken;\n\n      return this.apiClient.callApi(\n        '/corporate/subAccount/ssoToken', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Generate SSO token to access Sendinblue\n     * This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.sendinblue.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.\n     * @param {module:model/SsoTokenRequest} ssoTokenRequest Values to generate SSO token for sub-account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSsoToken}\n     */\n    this.corporateSubAccountSsoTokenPost = function(ssoTokenRequest) {\n      return this.corporateSubAccountSsoTokenPostWithHttpInfo(ssoTokenRequest)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4253, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4258, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/NotesApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/ErrorModel', 'model/Note', 'model/NoteData', 'model/NoteId', 'model/NoteList'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/Note'), require('../model/NoteData'), require('../model/NoteId'), require('../model/NoteList'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.NotesApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.Note, root.SibApiV3Sdk.NoteData, root.SibApiV3Sdk.NoteId, root.SibApiV3Sdk.NoteList);\n  }\n}(this, function(ApiClient, ErrorModel, Note, NoteData, NoteId, NoteList) {\n  'use strict';\n\n  /**\n   * Notes service.\n   * @module api/NotesApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new NotesApi. \n   * @alias module:api/NotesApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Get all notes\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.entity Filter by note entity type\n     * @param {String} opts.entityIds Filter by note entity IDs\n     * @param {Number} opts.dateFrom dateFrom to date range filter type (timestamp in milliseconds)\n     * @param {Number} opts.dateTo dateTo to date range filter type (timestamp in milliseconds)\n     * @param {Number} opts.offset Index of the first document of the page\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NoteList} and HTTP response\n     */\n    this.crmNotesGetWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'entity': opts['entity'],\n        'entityIds': opts['entityIds'],\n        'dateFrom': opts['dateFrom'],\n        'dateTo': opts['dateTo'],\n        'offset': opts['offset'],\n        'limit': opts['limit'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = NoteList;\n\n      return this.apiClient.callApi(\n        '/crm/notes', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all notes\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.entity Filter by note entity type\n     * @param {String} opts.entityIds Filter by note entity IDs\n     * @param {Number} opts.dateFrom dateFrom to date range filter type (timestamp in milliseconds)\n     * @param {Number} opts.dateTo dateTo to date range filter type (timestamp in milliseconds)\n     * @param {Number} opts.offset Index of the first document of the page\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NoteList}\n     */\n    this.crmNotesGet = function(opts) {\n      return this.crmNotesGetWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a note\n     * @param {String} id Note ID to delete\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.crmNotesIdDeleteWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmNotesIdDelete\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/crm/notes/{id}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a note\n     * @param {String} id Note ID to delete\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.crmNotesIdDelete = function(id) {\n      return this.crmNotesIdDeleteWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a note\n     * @param {String} id Note ID to get\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Note} and HTTP response\n     */\n    this.crmNotesIdGetWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmNotesIdGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = Note;\n\n      return this.apiClient.callApi(\n        '/crm/notes/{id}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a note\n     * @param {String} id Note ID to get\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Note}\n     */\n    this.crmNotesIdGet = function(id) {\n      return this.crmNotesIdGetWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a note\n     * @param {String} id Note ID to update\n     * @param {module:model/NoteData} body Note data to update a note\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.crmNotesIdPatchWithHttpInfo = function(id, body) {\n      var postBody = body;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmNotesIdPatch\");\n      }\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling crmNotesIdPatch\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/crm/notes/{id}', 'PATCH',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a note\n     * @param {String} id Note ID to update\n     * @param {module:model/NoteData} body Note data to update a note\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.crmNotesIdPatch = function(id, body) {\n      return this.crmNotesIdPatchWithHttpInfo(id, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a note\n     * @param {module:model/NoteData} body Note data to create a note.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NoteId} and HTTP response\n     */\n    this.crmNotesPostWithHttpInfo = function(body) {\n      var postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling crmNotesPost\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = NoteId;\n\n      return this.apiClient.callApi(\n        '/crm/notes', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a note\n     * @param {module:model/NoteData} body Note data to create a note.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NoteId}\n     */\n    this.crmNotesPost = function(body) {\n      return this.crmNotesPostWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4543, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4548, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/ProcessApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/ErrorModel', 'model/GetProcess', 'model/GetProcesses'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/GetProcess'), require('../model/GetProcesses'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.ProcessApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetProcess, root.SibApiV3Sdk.GetProcesses);\n  }\n}(this, function(ApiClient, ErrorModel, GetProcess, GetProcesses) {\n  'use strict';\n\n  /**\n   * Process service.\n   * @module api/ProcessApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new ProcessApi. \n   * @alias module:api/ProcessApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Return the informations for a process\n     * @param {Number} processId Id of the process\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProcess} and HTTP response\n     */\n    this.getProcessWithHttpInfo = function(processId) {\n      var postBody = null;\n\n      // verify the required parameter 'processId' is set\n      if (processId === undefined || processId === null) {\n        throw new Error(\"Missing the required parameter 'processId' when calling getProcess\");\n      }\n\n\n      var pathParams = {\n        'processId': processId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetProcess;\n\n      return this.apiClient.callApi(\n        '/processes/{processId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Return the informations for a process\n     * @param {Number} processId Id of the process\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProcess}\n     */\n    this.getProcess = function(processId) {\n      return this.getProcessWithHttpInfo(processId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Return all the processes for your account\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number limitation for the result returned (default to 10)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProcesses} and HTTP response\n     */\n    this.getProcessesWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetProcesses;\n\n      return this.apiClient.callApi(\n        '/processes', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Return all the processes for your account\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number limitation for the result returned (default to 10)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProcesses}\n     */\n    this.getProcesses = function(opts) {\n      return this.getProcessesWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcC,GAEA,CAAA,SAAS,IAAI,EAAE,OAAO;IACrB,IAAI,OAAO,WAAW,cAAc,OAAO,GAAG,EAAE;QAC9C,wCAAwC;QACxC,wDAAoF;;;;;;;;;;;;;;;;;IACtF,OAAO,IAAI,+CAAkB,YAAY,OAAO,OAAO,EAAE;QACvD,qEAAqE;QACrE,OAAO,OAAO,GAAG;IACnB,OAAO;QACL,mCAAmC;QACnC,IAAI,CAAC,KAAK,WAAW,EAAE;YACrB,KAAK,WAAW,GAAG,CAAC;QACtB;QACA,KAAK,WAAW,CAAC,UAAU,GAAG,QAAQ,KAAK,WAAW,CAAC,SAAS,EAAE,KAAK,WAAW,CAAC,UAAU,EAAE,KAAK,WAAW,CAAC,UAAU,EAAE,KAAK,WAAW,CAAC,YAAY;IAC3J;AACF,CAAA,EAAE,IAAI,EAAE,SAAS,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,YAAY;IAC9D;IAEA;;;;GAIC,GAED;;;;;;GAMC,GACD,IAAI,UAAU,SAAS,SAAS;QAC9B,IAAI,CAAC,SAAS,GAAG,aAAa,UAAU,QAAQ;QAIhD;;;;KAIC,GACD,IAAI,CAAC,sBAAsB,GAAG,SAAS,SAAS;YAC9C,IAAI,WAAW;YAEf,mDAAmD;YACnD,IAAI,cAAc,aAAa,cAAc,MAAM;gBACjD,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,aAAa;YACf;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,0BAA0B,OAC1B,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,UAAU,GAAG,SAAS,SAAS;YAClC,OAAO,IAAI,CAAC,sBAAsB,CAAC,WAChC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;;KAOC,GACD,IAAI,CAAC,wBAAwB,GAAG,SAAS,IAAI;YAC3C,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc;gBAChB,SAAS,IAAI,CAAC,QAAQ;gBACtB,UAAU,IAAI,CAAC,SAAS;gBACxB,QAAQ,IAAI,CAAC,OAAO;YACtB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,cAAc,OACd,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;;KAOC,GACD,IAAI,CAAC,YAAY,GAAG,SAAS,IAAI;YAC/B,OAAO,IAAI,CAAC,wBAAwB,CAAC,MAClC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;IACF;IAEA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 4692, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4697, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/ResellerApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/AddChildDomain', 'model/AddCredits', 'model/CreateChild', 'model/CreateReseller', 'model/ErrorModel', 'model/GetChildAccountCreationStatus', 'model/GetChildDomains', 'model/GetChildInfo', 'model/GetChildrenList', 'model/GetSsoToken', 'model/ManageIp', 'model/RemainingCreditModel', 'model/RemoveCredits', 'model/UpdateChild', 'model/UpdateChildAccountStatus', 'model/UpdateChildDomain'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/AddChildDomain'), require('../model/AddCredits'), require('../model/CreateChild'), require('../model/CreateReseller'), require('../model/ErrorModel'), require('../model/GetChildAccountCreationStatus'), require('../model/GetChildDomains'), require('../model/GetChildInfo'), require('../model/GetChildrenList'), require('../model/GetSsoToken'), require('../model/ManageIp'), require('../model/RemainingCreditModel'), require('../model/RemoveCredits'), require('../model/UpdateChild'), require('../model/UpdateChildAccountStatus'), require('../model/UpdateChildDomain'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.ResellerApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AddChildDomain, root.SibApiV3Sdk.AddCredits, root.SibApiV3Sdk.CreateChild, root.SibApiV3Sdk.CreateReseller, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetChildAccountCreationStatus, root.SibApiV3Sdk.GetChildDomains, root.SibApiV3Sdk.GetChildInfo, root.SibApiV3Sdk.GetChildrenList, root.SibApiV3Sdk.GetSsoToken, root.SibApiV3Sdk.ManageIp, root.SibApiV3Sdk.RemainingCreditModel, root.SibApiV3Sdk.RemoveCredits, root.SibApiV3Sdk.UpdateChild, root.SibApiV3Sdk.UpdateChildAccountStatus, root.SibApiV3Sdk.UpdateChildDomain);\n  }\n}(this, function(ApiClient, AddChildDomain, AddCredits, CreateChild, CreateReseller, ErrorModel, GetChildAccountCreationStatus, GetChildDomains, GetChildInfo, GetChildrenList, GetSsoToken, ManageIp, RemainingCreditModel, RemoveCredits, UpdateChild, UpdateChildAccountStatus, UpdateChildDomain) {\n  'use strict';\n\n  /**\n   * Reseller service.\n   * @module api/ResellerApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new ResellerApi. \n   * @alias module:api/ResellerApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Add Email and/or SMS credits to a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/AddCredits} addCredits Values to post to add credit to a specific child account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RemainingCreditModel} and HTTP response\n     */\n    this.addCreditsWithHttpInfo = function(childIdentifier, addCredits) {\n      var postBody = addCredits;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling addCredits\");\n      }\n\n      // verify the required parameter 'addCredits' is set\n      if (addCredits === undefined || addCredits === null) {\n        throw new Error(\"Missing the required parameter 'addCredits' when calling addCredits\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = RemainingCreditModel;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/credits/add', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Add Email and/or SMS credits to a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/AddCredits} addCredits Values to post to add credit to a specific child account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RemainingCreditModel}\n     */\n    this.addCredits = function(childIdentifier, addCredits) {\n      return this.addCreditsWithHttpInfo(childIdentifier, addCredits)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Associate a dedicated IP to the child\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/ManageIp} ip IP to associate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.associateIpToChildWithHttpInfo = function(childIdentifier, ip) {\n      var postBody = ip;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling associateIpToChild\");\n      }\n\n      // verify the required parameter 'ip' is set\n      if (ip === undefined || ip === null) {\n        throw new Error(\"Missing the required parameter 'ip' when calling associateIpToChild\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/ips/associate', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Associate a dedicated IP to the child\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/ManageIp} ip IP to associate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.associateIpToChild = function(childIdentifier, ip) {\n      return this.associateIpToChildWithHttpInfo(childIdentifier, ip)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a domain for a child account\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/AddChildDomain} addChildDomain Sender domain to add for a specific child account. This will not be displayed to the parent account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.createChildDomainWithHttpInfo = function(childIdentifier, addChildDomain) {\n      var postBody = addChildDomain;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling createChildDomain\");\n      }\n\n      // verify the required parameter 'addChildDomain' is set\n      if (addChildDomain === undefined || addChildDomain === null) {\n        throw new Error(\"Missing the required parameter 'addChildDomain' when calling createChildDomain\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/domains', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a domain for a child account\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/AddChildDomain} addChildDomain Sender domain to add for a specific child account. This will not be displayed to the parent account.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.createChildDomain = function(childIdentifier, addChildDomain) {\n      return this.createChildDomainWithHttpInfo(childIdentifier, addChildDomain)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Creates a reseller child\n     * @param {Object} opts Optional parameters\n     * @param {module:model/CreateChild} opts.resellerChild reseller child to add\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateReseller} and HTTP response\n     */\n    this.createResellerChildWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = opts['resellerChild'];\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateReseller;\n\n      return this.apiClient.callApi(\n        '/reseller/children', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Creates a reseller child\n     * @param {Object} opts Optional parameters\n     * @param {module:model/CreateChild} opts.resellerChild reseller child to add\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateReseller}\n     */\n    this.createResellerChild = function(opts) {\n      return this.createResellerChildWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete the sender domain of the reseller child based on the childIdentifier and domainName passed\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {String} domainName Pass the existing domain that needs to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteChildDomainWithHttpInfo = function(childIdentifier, domainName) {\n      var postBody = null;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling deleteChildDomain\");\n      }\n\n      // verify the required parameter 'domainName' is set\n      if (domainName === undefined || domainName === null) {\n        throw new Error(\"Missing the required parameter 'domainName' when calling deleteChildDomain\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier,\n        'domainName': domainName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/domains/{domainName}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete the sender domain of the reseller child based on the childIdentifier and domainName passed\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {String} domainName Pass the existing domain that needs to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteChildDomain = function(childIdentifier, domainName) {\n      return this.deleteChildDomainWithHttpInfo(childIdentifier, domainName)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a single reseller child based on the child identifier supplied\n     * @param {String} childIdentifier Either auth key or child id of reseller's child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteResellerChildWithHttpInfo = function(childIdentifier) {\n      var postBody = null;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling deleteResellerChild\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a single reseller child based on the child identifier supplied\n     * @param {String} childIdentifier Either auth key or child id of reseller's child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteResellerChild = function(childIdentifier) {\n      return this.deleteResellerChildWithHttpInfo(childIdentifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Dissociate a dedicated IP to the child\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/ManageIp} ip IP to dissociate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.dissociateIpFromChildWithHttpInfo = function(childIdentifier, ip) {\n      var postBody = ip;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling dissociateIpFromChild\");\n      }\n\n      // verify the required parameter 'ip' is set\n      if (ip === undefined || ip === null) {\n        throw new Error(\"Missing the required parameter 'ip' when calling dissociateIpFromChild\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/ips/dissociate', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Dissociate a dedicated IP to the child\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/ManageIp} ip IP to dissociate\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.dissociateIpFromChild = function(childIdentifier, ip) {\n      return this.dissociateIpFromChildWithHttpInfo(childIdentifier, ip)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the status of a reseller's child account creation, whether it is successfully created (exists) or not based on the identifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChildAccountCreationStatus} and HTTP response\n     */\n    this.getChildAccountCreationStatusWithHttpInfo = function(childIdentifier) {\n      var postBody = null;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling getChildAccountCreationStatus\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetChildAccountCreationStatus;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/accountCreationStatus', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the status of a reseller's child account creation, whether it is successfully created (exists) or not based on the identifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChildAccountCreationStatus}\n     */\n    this.getChildAccountCreationStatus = function(childIdentifier) {\n      return this.getChildAccountCreationStatusWithHttpInfo(childIdentifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all sender domains for a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChildDomains} and HTTP response\n     */\n    this.getChildDomainsWithHttpInfo = function(childIdentifier) {\n      var postBody = null;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling getChildDomains\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetChildDomains;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/domains', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all sender domains for a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChildDomains}\n     */\n    this.getChildDomains = function(childIdentifier) {\n      return this.getChildDomainsWithHttpInfo(childIdentifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a child account's details\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChildInfo} and HTTP response\n     */\n    this.getChildInfoWithHttpInfo = function(childIdentifier) {\n      var postBody = null;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling getChildInfo\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetChildInfo;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a child account's details\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChildInfo}\n     */\n    this.getChildInfo = function(childIdentifier) {\n      return this.getChildInfoWithHttpInfo(childIdentifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of all children accounts\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents for child accounts information per page (default to 10)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChildrenList} and HTTP response\n     */\n    this.getResellerChildsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetChildrenList;\n\n      return this.apiClient.callApi(\n        '/reseller/children', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of all children accounts\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents for child accounts information per page (default to 10)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChildrenList}\n     */\n    this.getResellerChilds = function(opts) {\n      return this.getResellerChildsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get session token to access Sendinblue (SSO)\n     * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern => https:/email.mydomain.com/login/sso?token=[token]\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSsoToken} and HTTP response\n     */\n    this.getSsoTokenWithHttpInfo = function(childIdentifier) {\n      var postBody = null;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling getSsoToken\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSsoToken;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/auth', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get session token to access Sendinblue (SSO)\n     * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern => https:/email.mydomain.com/login/sso?token=[token]\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSsoToken}\n     */\n    this.getSsoToken = function(childIdentifier) {\n      return this.getSsoTokenWithHttpInfo(childIdentifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Remove Email and/or SMS credits from a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/RemoveCredits} removeCredits Values to post to remove email or SMS credits from a specific child account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RemainingCreditModel} and HTTP response\n     */\n    this.removeCreditsWithHttpInfo = function(childIdentifier, removeCredits) {\n      var postBody = removeCredits;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling removeCredits\");\n      }\n\n      // verify the required parameter 'removeCredits' is set\n      if (removeCredits === undefined || removeCredits === null) {\n        throw new Error(\"Missing the required parameter 'removeCredits' when calling removeCredits\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = RemainingCreditModel;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/credits/remove', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Remove Email and/or SMS credits from a specific child account\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/RemoveCredits} removeCredits Values to post to remove email or SMS credits from a specific child account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RemainingCreditModel}\n     */\n    this.removeCredits = function(childIdentifier, removeCredits) {\n      return this.removeCreditsWithHttpInfo(childIdentifier, removeCredits)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update info of reseller's child account status based on the childIdentifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/UpdateChildAccountStatus} updateChildAccountStatus values to update in child account status\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateChildAccountStatusWithHttpInfo = function(childIdentifier, updateChildAccountStatus) {\n      var postBody = updateChildAccountStatus;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling updateChildAccountStatus\");\n      }\n\n      // verify the required parameter 'updateChildAccountStatus' is set\n      if (updateChildAccountStatus === undefined || updateChildAccountStatus === null) {\n        throw new Error(\"Missing the required parameter 'updateChildAccountStatus' when calling updateChildAccountStatus\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/accountStatus', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update info of reseller's child account status based on the childIdentifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/UpdateChildAccountStatus} updateChildAccountStatus values to update in child account status\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateChildAccountStatus = function(childIdentifier, updateChildAccountStatus) {\n      return this.updateChildAccountStatusWithHttpInfo(childIdentifier, updateChildAccountStatus)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update the sender domain of reseller's child based on the childIdentifier and domainName passed\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {String} domainName Pass the existing domain that needs to be updated\n     * @param {module:model/UpdateChildDomain} updateChildDomain value to update for sender domain\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateChildDomainWithHttpInfo = function(childIdentifier, domainName, updateChildDomain) {\n      var postBody = updateChildDomain;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling updateChildDomain\");\n      }\n\n      // verify the required parameter 'domainName' is set\n      if (domainName === undefined || domainName === null) {\n        throw new Error(\"Missing the required parameter 'domainName' when calling updateChildDomain\");\n      }\n\n      // verify the required parameter 'updateChildDomain' is set\n      if (updateChildDomain === undefined || updateChildDomain === null) {\n        throw new Error(\"Missing the required parameter 'updateChildDomain' when calling updateChildDomain\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier,\n        'domainName': domainName\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}/domains/{domainName}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update the sender domain of reseller's child based on the childIdentifier and domainName passed\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {String} domainName Pass the existing domain that needs to be updated\n     * @param {module:model/UpdateChildDomain} updateChildDomain value to update for sender domain\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateChildDomain = function(childIdentifier, domainName, updateChildDomain) {\n      return this.updateChildDomainWithHttpInfo(childIdentifier, domainName, updateChildDomain)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update info of reseller's child based on the child identifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/UpdateChild} resellerChild values to update in child profile\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateResellerChildWithHttpInfo = function(childIdentifier, resellerChild) {\n      var postBody = resellerChild;\n\n      // verify the required parameter 'childIdentifier' is set\n      if (childIdentifier === undefined || childIdentifier === null) {\n        throw new Error(\"Missing the required parameter 'childIdentifier' when calling updateResellerChild\");\n      }\n\n      // verify the required parameter 'resellerChild' is set\n      if (resellerChild === undefined || resellerChild === null) {\n        throw new Error(\"Missing the required parameter 'resellerChild' when calling updateResellerChild\");\n      }\n\n\n      var pathParams = {\n        'childIdentifier': childIdentifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/reseller/children/{childIdentifier}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update info of reseller's child based on the child identifier supplied\n     * @param {String} childIdentifier Either auth key or id of reseller's child\n     * @param {module:model/UpdateChild} resellerChild values to update in child profile\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateResellerChild = function(childIdentifier, resellerChild) {\n      return this.updateResellerChildWithHttpInfo(childIdentifier, resellerChild)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5497, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5502, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/SMSCampaignsApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/CreateModel', 'model/CreateSmsCampaign', 'model/CreatedProcessId', 'model/ErrorModel', 'model/GetSmsCampaign', 'model/GetSmsCampaigns', 'model/PostSendSmsTestFailed', 'model/RequestSmsRecipientExport', 'model/SendReport', 'model/SendTestSms', 'model/UpdateCampaignStatus', 'model/UpdateSmsCampaign'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/CreateModel'), require('../model/CreateSmsCampaign'), require('../model/CreatedProcessId'), require('../model/ErrorModel'), require('../model/GetSmsCampaign'), require('../model/GetSmsCampaigns'), require('../model/PostSendSmsTestFailed'), require('../model/RequestSmsRecipientExport'), require('../model/SendReport'), require('../model/SendTestSms'), require('../model/UpdateCampaignStatus'), require('../model/UpdateSmsCampaign'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.SMSCampaignsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateSmsCampaign, root.SibApiV3Sdk.CreatedProcessId, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetSmsCampaign, root.SibApiV3Sdk.GetSmsCampaigns, root.SibApiV3Sdk.PostSendSmsTestFailed, root.SibApiV3Sdk.RequestSmsRecipientExport, root.SibApiV3Sdk.SendReport, root.SibApiV3Sdk.SendTestSms, root.SibApiV3Sdk.UpdateCampaignStatus, root.SibApiV3Sdk.UpdateSmsCampaign);\n  }\n}(this, function(ApiClient, CreateModel, CreateSmsCampaign, CreatedProcessId, ErrorModel, GetSmsCampaign, GetSmsCampaigns, PostSendSmsTestFailed, RequestSmsRecipientExport, SendReport, SendTestSms, UpdateCampaignStatus, UpdateSmsCampaign) {\n  'use strict';\n\n  /**\n   * SMSCampaigns service.\n   * @module api/SMSCampaignsApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new SMSCampaignsApi. \n   * @alias module:api/SMSCampaignsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Creates an SMS campaign\n     * @param {module:model/CreateSmsCampaign} createSmsCampaign Values to create an SMS Campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createSmsCampaignWithHttpInfo = function(createSmsCampaign) {\n      var postBody = createSmsCampaign;\n\n      // verify the required parameter 'createSmsCampaign' is set\n      if (createSmsCampaign === undefined || createSmsCampaign === null) {\n        throw new Error(\"Missing the required parameter 'createSmsCampaign' when calling createSmsCampaign\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Creates an SMS campaign\n     * @param {module:model/CreateSmsCampaign} createSmsCampaign Values to create an SMS Campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createSmsCampaign = function(createSmsCampaign) {\n      return this.createSmsCampaignWithHttpInfo(createSmsCampaign)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteSmsCampaignWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling deleteSmsCampaign\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteSmsCampaign = function(campaignId) {\n      return this.deleteSmsCampaignWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmsCampaign} and HTTP response\n     */\n    this.getSmsCampaignWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling getSmsCampaign\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmsCampaign;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmsCampaign}\n     */\n    this.getSmsCampaign = function(campaignId) {\n      return this.getSmsCampaignWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Returns the information for all your created SMS campaigns\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.status Status of campaign.\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )\n     * @param {Number} opts.limit Number limitation for the result returned (default to 500)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmsCampaigns} and HTTP response\n     */\n    this.getSmsCampaignsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'status': opts['status'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmsCampaigns;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Returns the information for all your created SMS campaigns\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.status Status of campaign.\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )\n     * @param {Number} opts.limit Number limitation for the result returned (default to 500)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmsCampaigns}\n     */\n    this.getSmsCampaigns = function(opts) {\n      return this.getSmsCampaignsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Export an SMS campaign's recipients\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input.\n     * @param {Number} campaignId id of the campaign\n     * @param {Object} opts Optional parameters\n     * @param {module:model/RequestSmsRecipientExport} opts.recipientExport Values to send for a recipient export request\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response\n     */\n    this.requestSmsRecipientExportWithHttpInfo = function(campaignId, opts) {\n      opts = opts || {};\n      var postBody = opts['recipientExport'];\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling requestSmsRecipientExport\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreatedProcessId;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}/exportRecipients', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Export an SMS campaign's recipients\n     * It returns the background process ID which on completion calls the notify URL that you have set in the input.\n     * @param {Number} campaignId id of the campaign\n     * @param {Object} opts Optional parameters\n     * @param {module:model/RequestSmsRecipientExport} opts.recipientExport Values to send for a recipient export request\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}\n     */\n    this.requestSmsRecipientExport = function(campaignId, opts) {\n      return this.requestSmsRecipientExportWithHttpInfo(campaignId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send your SMS campaign immediately\n     * @param {Number} campaignId id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendSmsCampaignNowWithHttpInfo = function(campaignId) {\n      var postBody = null;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendSmsCampaignNow\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}/sendNow', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send your SMS campaign immediately\n     * @param {Number} campaignId id of the campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendSmsCampaignNow = function(campaignId) {\n      return this.sendSmsCampaignNowWithHttpInfo(campaignId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send an SMS campaign's report\n     * Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.\n     * @param {Number} campaignId id of the campaign\n     * @param {module:model/SendReport} sendReport Values for send a report\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendSmsReportWithHttpInfo = function(campaignId, sendReport) {\n      var postBody = sendReport;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendSmsReport\");\n      }\n\n      // verify the required parameter 'sendReport' is set\n      if (sendReport === undefined || sendReport === null) {\n        throw new Error(\"Missing the required parameter 'sendReport' when calling sendSmsReport\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}/sendReport', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send an SMS campaign's report\n     * Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.\n     * @param {Number} campaignId id of the campaign\n     * @param {module:model/SendReport} sendReport Values for send a report\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendSmsReport = function(campaignId, sendReport) {\n      return this.sendSmsReportWithHttpInfo(campaignId, sendReport)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send a test SMS campaign\n     * @param {Number} campaignId Id of the SMS campaign\n     * @param {module:model/SendTestSms} phoneNumber Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendTestSmsWithHttpInfo = function(campaignId, phoneNumber) {\n      var postBody = phoneNumber;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling sendTestSms\");\n      }\n\n      // verify the required parameter 'phoneNumber' is set\n      if (phoneNumber === undefined || phoneNumber === null) {\n        throw new Error(\"Missing the required parameter 'phoneNumber' when calling sendTestSms\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}/sendTest', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send a test SMS campaign\n     * @param {Number} campaignId Id of the SMS campaign\n     * @param {module:model/SendTestSms} phoneNumber Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendTestSms = function(campaignId, phoneNumber) {\n      return this.sendTestSmsWithHttpInfo(campaignId, phoneNumber)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @param {module:model/UpdateSmsCampaign} updateSmsCampaign Values to update an SMS Campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateSmsCampaignWithHttpInfo = function(campaignId, updateSmsCampaign) {\n      var postBody = updateSmsCampaign;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling updateSmsCampaign\");\n      }\n\n      // verify the required parameter 'updateSmsCampaign' is set\n      if (updateSmsCampaign === undefined || updateSmsCampaign === null) {\n        throw new Error(\"Missing the required parameter 'updateSmsCampaign' when calling updateSmsCampaign\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update an SMS campaign\n     * @param {Number} campaignId id of the SMS campaign\n     * @param {module:model/UpdateSmsCampaign} updateSmsCampaign Values to update an SMS Campaign\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateSmsCampaign = function(campaignId, updateSmsCampaign) {\n      return this.updateSmsCampaignWithHttpInfo(campaignId, updateSmsCampaign)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a campaign's status\n     * @param {Number} campaignId id of the campaign\n     * @param {module:model/UpdateCampaignStatus} status Status of the campaign.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateSmsCampaignStatusWithHttpInfo = function(campaignId, status) {\n      var postBody = status;\n\n      // verify the required parameter 'campaignId' is set\n      if (campaignId === undefined || campaignId === null) {\n        throw new Error(\"Missing the required parameter 'campaignId' when calling updateSmsCampaignStatus\");\n      }\n\n      // verify the required parameter 'status' is set\n      if (status === undefined || status === null) {\n        throw new Error(\"Missing the required parameter 'status' when calling updateSmsCampaignStatus\");\n      }\n\n\n      var pathParams = {\n        'campaignId': campaignId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smsCampaigns/{campaignId}/status', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a campaign's status\n     * @param {Number} campaignId id of the campaign\n     * @param {module:model/UpdateCampaignStatus} status Status of the campaign.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateSmsCampaignStatus = function(campaignId, status) {\n      return this.updateSmsCampaignStatusWithHttpInfo(campaignId, status)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6034, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6039, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/SendersApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/CreateSender', 'model/CreateSenderModel', 'model/ErrorModel', 'model/GetIps', 'model/GetIpsFromSender', 'model/GetSendersList', 'model/UpdateSender'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/CreateSender'), require('../model/CreateSenderModel'), require('../model/ErrorModel'), require('../model/GetIps'), require('../model/GetIpsFromSender'), require('../model/GetSendersList'), require('../model/UpdateSender'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.SendersApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateSender, root.SibApiV3Sdk.CreateSenderModel, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetIps, root.SibApiV3Sdk.GetIpsFromSender, root.SibApiV3Sdk.GetSendersList, root.SibApiV3Sdk.UpdateSender);\n  }\n}(this, function(ApiClient, CreateSender, CreateSenderModel, ErrorModel, GetIps, GetIpsFromSender, GetSendersList, UpdateSender) {\n  'use strict';\n\n  /**\n   * Senders service.\n   * @module api/SendersApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new SendersApi. \n   * @alias module:api/SendersApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Create a new sender\n     * @param {Object} opts Optional parameters\n     * @param {module:model/CreateSender} opts.sender sender's name\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSenderModel} and HTTP response\n     */\n    this.createSenderWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = opts['sender'];\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateSenderModel;\n\n      return this.apiClient.callApi(\n        '/senders', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a new sender\n     * @param {Object} opts Optional parameters\n     * @param {module:model/CreateSender} opts.sender sender's name\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSenderModel}\n     */\n    this.createSender = function(opts) {\n      return this.createSenderWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a sender\n     * @param {Number} senderId Id of the sender\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteSenderWithHttpInfo = function(senderId) {\n      var postBody = null;\n\n      // verify the required parameter 'senderId' is set\n      if (senderId === undefined || senderId === null) {\n        throw new Error(\"Missing the required parameter 'senderId' when calling deleteSender\");\n      }\n\n\n      var pathParams = {\n        'senderId': senderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/senders/{senderId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a sender\n     * @param {Number} senderId Id of the sender\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteSender = function(senderId) {\n      return this.deleteSenderWithHttpInfo(senderId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all the dedicated IPs for your account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetIps} and HTTP response\n     */\n    this.getIpsWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetIps;\n\n      return this.apiClient.callApi(\n        '/senders/ips', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all the dedicated IPs for your account\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetIps}\n     */\n    this.getIps = function() {\n      return this.getIpsWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all the dedicated IPs for a sender\n     * @param {Number} senderId Id of the sender\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetIpsFromSender} and HTTP response\n     */\n    this.getIpsFromSenderWithHttpInfo = function(senderId) {\n      var postBody = null;\n\n      // verify the required parameter 'senderId' is set\n      if (senderId === undefined || senderId === null) {\n        throw new Error(\"Missing the required parameter 'senderId' when calling getIpsFromSender\");\n      }\n\n\n      var pathParams = {\n        'senderId': senderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetIpsFromSender;\n\n      return this.apiClient.callApi(\n        '/senders/{senderId}/ips', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all the dedicated IPs for a sender\n     * @param {Number} senderId Id of the sender\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetIpsFromSender}\n     */\n    this.getIpsFromSender = function(senderId) {\n      return this.getIpsFromSenderWithHttpInfo(senderId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of all your senders\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.ip Filter your senders for a specific ip (available for dedicated IP usage only)\n     * @param {String} opts.domain Filter your senders for a specific domain\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSendersList} and HTTP response\n     */\n    this.getSendersWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'ip': opts['ip'],\n        'domain': opts['domain'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSendersList;\n\n      return this.apiClient.callApi(\n        '/senders', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of all your senders\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.ip Filter your senders for a specific ip (available for dedicated IP usage only)\n     * @param {String} opts.domain Filter your senders for a specific domain\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSendersList}\n     */\n    this.getSenders = function(opts) {\n      return this.getSendersWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a sender\n     * @param {Number} senderId Id of the sender\n     * @param {Object} opts Optional parameters\n     * @param {module:model/UpdateSender} opts.sender sender's name\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateSenderWithHttpInfo = function(senderId, opts) {\n      opts = opts || {};\n      var postBody = opts['sender'];\n\n      // verify the required parameter 'senderId' is set\n      if (senderId === undefined || senderId === null) {\n        throw new Error(\"Missing the required parameter 'senderId' when calling updateSender\");\n      }\n\n\n      var pathParams = {\n        'senderId': senderId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/senders/{senderId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a sender\n     * @param {Number} senderId Id of the sender\n     * @param {Object} opts Optional parameters\n     * @param {module:model/UpdateSender} opts.sender sender's name\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateSender = function(senderId, opts) {\n      return this.updateSenderWithHttpInfo(senderId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcC,GAEA,CAAA,SAAS,IAAI,EAAE,OAAO;IACrB,IAAI,OAAO,WAAW,cAAc,OAAO,GAAG,EAAE;QAC9C,wCAAwC;QACxC,wDAAmL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACrL,OAAO,IAAI,+CAAkB,YAAY,OAAO,OAAO,EAAE;QACvD,qEAAqE;QACrE,OAAO,OAAO,GAAG;IACnB,OAAO;QACL,mCAAmC;QACnC,IAAI,CAAC,KAAK,WAAW,EAAE;YACrB,KAAK,WAAW,GAAG,CAAC;QACtB;QACA,KAAK,WAAW,CAAC,UAAU,GAAG,QAAQ,KAAK,WAAW,CAAC,SAAS,EAAE,KAAK,WAAW,CAAC,YAAY,EAAE,KAAK,WAAW,CAAC,iBAAiB,EAAE,KAAK,WAAW,CAAC,UAAU,EAAE,KAAK,WAAW,CAAC,MAAM,EAAE,KAAK,WAAW,CAAC,gBAAgB,EAAE,KAAK,WAAW,CAAC,cAAc,EAAE,KAAK,WAAW,CAAC,YAAY;IAC9R;AACF,CAAA,EAAE,IAAI,EAAE,SAAS,SAAS,EAAE,YAAY,EAAE,iBAAiB,EAAE,UAAU,EAAE,MAAM,EAAE,gBAAgB,EAAE,cAAc,EAAE,YAAY;IAC7H;IAEA;;;;GAIC,GAED;;;;;;GAMC,GACD,IAAI,UAAU,SAAS,SAAS;QAC9B,IAAI,CAAC,SAAS,GAAG,aAAa,UAAU,QAAQ;QAIhD;;;;;KAKC,GACD,IAAI,CAAC,wBAAwB,GAAG,SAAS,IAAI;YAC3C,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW,IAAI,CAAC,SAAS;YAG7B,IAAI,aAAa,CACjB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,YAAY,QACZ,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;KAKC,GACD,IAAI,CAAC,YAAY,GAAG,SAAS,IAAI;YAC/B,OAAO,IAAI,CAAC,wBAAwB,CAAC,MAClC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,wBAAwB,GAAG,SAAS,QAAQ;YAC/C,IAAI,WAAW;YAEf,kDAAkD;YAClD,IAAI,aAAa,aAAa,aAAa,MAAM;gBAC/C,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,YAAY;YACd;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,uBAAuB,UACvB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,YAAY,GAAG,SAAS,QAAQ;YACnC,OAAO,IAAI,CAAC,wBAAwB,CAAC,UAClC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;KAGC,GACD,IAAI,CAAC,kBAAkB,GAAG;YACxB,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,gBAAgB,OAChB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;KAGC,GACD,IAAI,CAAC,MAAM,GAAG;YACZ,OAAO,IAAI,CAAC,kBAAkB,GAC3B,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,4BAA4B,GAAG,SAAS,QAAQ;YACnD,IAAI,WAAW;YAEf,kDAAkD;YAClD,IAAI,aAAa,aAAa,aAAa,MAAM;gBAC/C,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,YAAY;YACd;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,2BAA2B,OAC3B,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,gBAAgB,GAAG,SAAS,QAAQ;YACvC,OAAO,IAAI,CAAC,4BAA4B,CAAC,UACtC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;KAMC,GACD,IAAI,CAAC,sBAAsB,GAAG,SAAS,IAAI;YACzC,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc;gBAChB,MAAM,IAAI,CAAC,KAAK;gBAChB,UAAU,IAAI,CAAC,SAAS;YAC1B;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,YAAY,OACZ,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;KAMC,GACD,IAAI,CAAC,UAAU,GAAG,SAAS,IAAI;YAC7B,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAChC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;KAMC,GACD,IAAI,CAAC,wBAAwB,GAAG,SAAS,QAAQ,EAAE,IAAI;YACrD,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW,IAAI,CAAC,SAAS;YAE7B,kDAAkD;YAClD,IAAI,aAAa,aAAa,aAAa,MAAM;gBAC/C,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,YAAY;YACd;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,uBAAuB,OACvB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;KAMC,GACD,IAAI,CAAC,YAAY,GAAG,SAAS,QAAQ,EAAE,IAAI;YACzC,OAAO,IAAI,CAAC,wBAAwB,CAAC,UAAU,MAC5C,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;IACF;IAEA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 6346, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6351, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/TasksApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/Body6', 'model/Body7', 'model/ErrorModel', 'model/InlineResponse2011', 'model/Task', 'model/TaskList', 'model/TaskTypes'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/Body6'), require('../model/Body7'), require('../model/ErrorModel'), require('../model/InlineResponse2011'), require('../model/Task'), require('../model/TaskList'), require('../model/TaskTypes'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.TasksApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.Body6, root.SibApiV3Sdk.Body7, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.InlineResponse2011, root.SibApiV3Sdk.Task, root.SibApiV3Sdk.TaskList, root.SibApiV3Sdk.TaskTypes);\n  }\n}(this, function(ApiClient, Body6, Body7, ErrorModel, InlineResponse2011, Task, TaskList, TaskTypes) {\n  'use strict';\n\n  /**\n   * Tasks service.\n   * @module api/TasksApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new TasksApi. \n   * @alias module:api/TasksApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Get all tasks\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.filterType Filter by task type (ID)\n     * @param {module:model/String} opts.filterStatus Filter by task status\n     * @param {module:model/String} opts.filterDate Filter by date\n     * @param {String} opts.filterAssignTo Filter by assignTo id\n     * @param {String} opts.filterContacts Filter by contact ids\n     * @param {String} opts.filterDeals Filter by deals ids\n     * @param {String} opts.filterCompanies Filter by companies ids\n     * @param {Number} opts.dateFrom dateFrom to date range filter type (timestamp in milliseconds)\n     * @param {Number} opts.dateTo dateTo to date range filter type (timestamp in milliseconds)\n     * @param {Number} opts.offset Index of the first document of the page\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed\n     * @param {String} opts.sortBy The field used to sort field names.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TaskList} and HTTP response\n     */\n    this.crmTasksGetWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'filter[type]': opts['filterType'],\n        'filter[status]': opts['filterStatus'],\n        'filter[date]': opts['filterDate'],\n        'filter[assignTo]': opts['filterAssignTo'],\n        'filter[contacts]': opts['filterContacts'],\n        'filter[deals]': opts['filterDeals'],\n        'filter[companies]': opts['filterCompanies'],\n        'dateFrom': opts['dateFrom'],\n        'dateTo': opts['dateTo'],\n        'offset': opts['offset'],\n        'limit': opts['limit'],\n        'sort': opts['sort'],\n        'sortBy': opts['sortBy'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = TaskList;\n\n      return this.apiClient.callApi(\n        '/crm/tasks', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all tasks\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.filterType Filter by task type (ID)\n     * @param {module:model/String} opts.filterStatus Filter by task status\n     * @param {module:model/String} opts.filterDate Filter by date\n     * @param {String} opts.filterAssignTo Filter by assignTo id\n     * @param {String} opts.filterContacts Filter by contact ids\n     * @param {String} opts.filterDeals Filter by deals ids\n     * @param {String} opts.filterCompanies Filter by companies ids\n     * @param {Number} opts.dateFrom dateFrom to date range filter type (timestamp in milliseconds)\n     * @param {Number} opts.dateTo dateTo to date range filter type (timestamp in milliseconds)\n     * @param {Number} opts.offset Index of the first document of the page\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed\n     * @param {String} opts.sortBy The field used to sort field names.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TaskList}\n     */\n    this.crmTasksGet = function(opts) {\n      return this.crmTasksGetWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a task\n     * @param {String} id \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.crmTasksIdDeleteWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmTasksIdDelete\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/crm/tasks/{id}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a task\n     * @param {String} id \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.crmTasksIdDelete = function(id) {\n      return this.crmTasksIdDeleteWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a task\n     * @param {String} id \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Task} and HTTP response\n     */\n    this.crmTasksIdGetWithHttpInfo = function(id) {\n      var postBody = null;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmTasksIdGet\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = Task;\n\n      return this.apiClient.callApi(\n        '/crm/tasks/{id}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a task\n     * @param {String} id \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Task}\n     */\n    this.crmTasksIdGet = function(id) {\n      return this.crmTasksIdGetWithHttpInfo(id)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a task\n     * @param {String} id \n     * @param {module:model/Body7} body Updated task details.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.crmTasksIdPatchWithHttpInfo = function(id, body) {\n      var postBody = body;\n\n      // verify the required parameter 'id' is set\n      if (id === undefined || id === null) {\n        throw new Error(\"Missing the required parameter 'id' when calling crmTasksIdPatch\");\n      }\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling crmTasksIdPatch\");\n      }\n\n\n      var pathParams = {\n        'id': id\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/crm/tasks/{id}', 'PATCH',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a task\n     * @param {String} id \n     * @param {module:model/Body7} body Updated task details.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.crmTasksIdPatch = function(id, body) {\n      return this.crmTasksIdPatchWithHttpInfo(id, body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create a task\n     * @param {module:model/Body6} body Task name.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2011} and HTTP response\n     */\n    this.crmTasksPostWithHttpInfo = function(body) {\n      var postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body === undefined || body === null) {\n        throw new Error(\"Missing the required parameter 'body' when calling crmTasksPost\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = InlineResponse2011;\n\n      return this.apiClient.callApi(\n        '/crm/tasks', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a task\n     * @param {module:model/Body6} body Task name.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2011}\n     */\n    this.crmTasksPost = function(body) {\n      return this.crmTasksPostWithHttpInfo(body)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all task types\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TaskTypes} and HTTP response\n     */\n    this.crmTasktypesGetWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = TaskTypes;\n\n      return this.apiClient.callApi(\n        '/crm/tasktypes', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all task types\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TaskTypes}\n     */\n    this.crmTasktypesGet = function() {\n      return this.crmTasktypesGetWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6693, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6698, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/TransactionalEmailsApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/BlockDomain', 'model/CreateModel', 'model/CreateSmtpEmail', 'model/CreateSmtpTemplate', 'model/DeleteHardbounces', 'model/ErrorModel', 'model/GetAggregatedReport', 'model/GetBlockedDomains', 'model/GetEmailEventReport', 'model/GetReports', 'model/GetScheduledEmailByBatchId', 'model/GetScheduledEmailByMessageId', 'model/GetSmtpTemplateOverview', 'model/GetSmtpTemplates', 'model/GetTransacBlockedContacts', 'model/GetTransacEmailContent', 'model/GetTransacEmailsList', 'model/PostSendFailed', 'model/ScheduleSmtpEmail', 'model/SendSmtpEmail', 'model/SendTestEmail', 'model/UpdateSmtpTemplate'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/BlockDomain'), require('../model/CreateModel'), require('../model/CreateSmtpEmail'), require('../model/CreateSmtpTemplate'), require('../model/DeleteHardbounces'), require('../model/ErrorModel'), require('../model/GetAggregatedReport'), require('../model/GetBlockedDomains'), require('../model/GetEmailEventReport'), require('../model/GetReports'), require('../model/GetScheduledEmailByBatchId'), require('../model/GetScheduledEmailByMessageId'), require('../model/GetSmtpTemplateOverview'), require('../model/GetSmtpTemplates'), require('../model/GetTransacBlockedContacts'), require('../model/GetTransacEmailContent'), require('../model/GetTransacEmailsList'), require('../model/PostSendFailed'), require('../model/ScheduleSmtpEmail'), require('../model/SendSmtpEmail'), require('../model/SendTestEmail'), require('../model/UpdateSmtpTemplate'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.TransactionalEmailsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.BlockDomain, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateSmtpEmail, root.SibApiV3Sdk.CreateSmtpTemplate, root.SibApiV3Sdk.DeleteHardbounces, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetAggregatedReport, root.SibApiV3Sdk.GetBlockedDomains, root.SibApiV3Sdk.GetEmailEventReport, root.SibApiV3Sdk.GetReports, root.SibApiV3Sdk.GetScheduledEmailByBatchId, root.SibApiV3Sdk.GetScheduledEmailByMessageId, root.SibApiV3Sdk.GetSmtpTemplateOverview, root.SibApiV3Sdk.GetSmtpTemplates, root.SibApiV3Sdk.GetTransacBlockedContacts, root.SibApiV3Sdk.GetTransacEmailContent, root.SibApiV3Sdk.GetTransacEmailsList, root.SibApiV3Sdk.PostSendFailed, root.SibApiV3Sdk.ScheduleSmtpEmail, root.SibApiV3Sdk.SendSmtpEmail, root.SibApiV3Sdk.SendTestEmail, root.SibApiV3Sdk.UpdateSmtpTemplate);\n  }\n}(this, function(ApiClient, BlockDomain, CreateModel, CreateSmtpEmail, CreateSmtpTemplate, DeleteHardbounces, ErrorModel, GetAggregatedReport, GetBlockedDomains, GetEmailEventReport, GetReports, GetScheduledEmailByBatchId, GetScheduledEmailByMessageId, GetSmtpTemplateOverview, GetSmtpTemplates, GetTransacBlockedContacts, GetTransacEmailContent, GetTransacEmailsList, PostSendFailed, ScheduleSmtpEmail, SendSmtpEmail, SendTestEmail, UpdateSmtpTemplate) {\n  'use strict';\n\n  /**\n   * TransactionalEmails service.\n   * @module api/TransactionalEmailsApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new TransactionalEmailsApi. \n   * @alias module:api/TransactionalEmailsApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Add a new domain to the list of blocked domains\n     * Blocks a new domain in order to avoid messages being sent to the same\n     * @param {module:model/BlockDomain} blockDomain \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.blockNewDomainWithHttpInfo = function(blockDomain) {\n      var postBody = blockDomain;\n\n      // verify the required parameter 'blockDomain' is set\n      if (blockDomain === undefined || blockDomain === null) {\n        throw new Error(\"Missing the required parameter 'blockDomain' when calling blockNewDomain\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/blockedDomains', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Add a new domain to the list of blocked domains\n     * Blocks a new domain in order to avoid messages being sent to the same\n     * @param {module:model/BlockDomain} blockDomain \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.blockNewDomain = function(blockDomain) {\n      return this.blockNewDomainWithHttpInfo(blockDomain)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Create an email template\n     * @param {module:model/CreateSmtpTemplate} smtpTemplate values to update in transactional email template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createSmtpTemplateWithHttpInfo = function(smtpTemplate) {\n      var postBody = smtpTemplate;\n\n      // verify the required parameter 'smtpTemplate' is set\n      if (smtpTemplate === undefined || smtpTemplate === null) {\n        throw new Error(\"Missing the required parameter 'smtpTemplate' when calling createSmtpTemplate\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/smtp/templates', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create an email template\n     * @param {module:model/CreateSmtpTemplate} smtpTemplate values to update in transactional email template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createSmtpTemplate = function(smtpTemplate) {\n      return this.createSmtpTemplateWithHttpInfo(smtpTemplate)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Unblock an existing domain from the list of blocked domains\n     * Unblocks an existing domain from the list of blocked domains\n     * @param {String} domain The name of the domain to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteBlockedDomainWithHttpInfo = function(domain) {\n      var postBody = null;\n\n      // verify the required parameter 'domain' is set\n      if (domain === undefined || domain === null) {\n        throw new Error(\"Missing the required parameter 'domain' when calling deleteBlockedDomain\");\n      }\n\n\n      var pathParams = {\n        'domain': domain\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/blockedDomains/{domain}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Unblock an existing domain from the list of blocked domains\n     * Unblocks an existing domain from the list of blocked domains\n     * @param {String} domain The name of the domain to be deleted\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteBlockedDomain = function(domain) {\n      return this.deleteBlockedDomainWithHttpInfo(domain)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete hardbounces\n     * Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)\n     * @param {Object} opts Optional parameters\n     * @param {module:model/DeleteHardbounces} opts.deleteHardbounces values to delete hardbounces\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteHardbouncesWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = opts['deleteHardbounces'];\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/deleteHardbounces', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete hardbounces\n     * Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)\n     * @param {Object} opts Optional parameters\n     * @param {module:model/DeleteHardbounces} opts.deleteHardbounces values to delete hardbounces\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteHardbounces = function(opts) {\n      return this.deleteHardbouncesWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete scheduled emails by batchId or messageId\n     * Delete scheduled batch of emails by batchId or single scheduled email by messageId\n     * @param {String} identifier The `batchId` of scheduled emails batch (Should be a valid UUIDv4) or the `messageId` of scheduled email.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteScheduledEmailByIdWithHttpInfo = function(identifier) {\n      var postBody = null;\n\n      // verify the required parameter 'identifier' is set\n      if (identifier === undefined || identifier === null) {\n        throw new Error(\"Missing the required parameter 'identifier' when calling deleteScheduledEmailById\");\n      }\n\n\n      var pathParams = {\n        'identifier': identifier\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/email/{identifier}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete scheduled emails by batchId or messageId\n     * Delete scheduled batch of emails by batchId or single scheduled email by messageId\n     * @param {String} identifier The `batchId` of scheduled emails batch (Should be a valid UUIDv4) or the `messageId` of scheduled email.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteScheduledEmailById = function(identifier) {\n      return this.deleteScheduledEmailByIdWithHttpInfo(identifier)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an inactive email template\n     * @param {Number} templateId id of the template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteSmtpTemplateWithHttpInfo = function(templateId) {\n      var postBody = null;\n\n      // verify the required parameter 'templateId' is set\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling deleteSmtpTemplate\");\n      }\n\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/templates/{templateId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an inactive email template\n     * @param {Number} templateId id of the template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteSmtpTemplate = function(templateId) {\n      return this.deleteSmtpTemplateWithHttpInfo(templateId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get your transactional email activity aggregated over a period of time\n     * This endpoint will show the aggregated stats for past 90 days by default if `startDate` and `endDate` OR `days` is not passed. The date range can not exceed 90 days\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'\n     * @param {String} opts.tag Tag of the emails\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAggregatedReport} and HTTP response\n     */\n    this.getAggregatedSmtpReportWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'days': opts['days'],\n        'tag': opts['tag'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetAggregatedReport;\n\n      return this.apiClient.callApi(\n        '/smtp/statistics/aggregatedReport', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get your transactional email activity aggregated over a period of time\n     * This endpoint will show the aggregated stats for past 90 days by default if `startDate` and `endDate` OR `days` is not passed. The date range can not exceed 90 days\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'\n     * @param {String} opts.tag Tag of the emails\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAggregatedReport}\n     */\n    this.getAggregatedSmtpReport = function(opts) {\n      return this.getAggregatedSmtpReportWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of blocked domains\n     * Get the list of blocked domains\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetBlockedDomains} and HTTP response\n     */\n    this.getBlockedDomainsWithHttpInfo = function() {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetBlockedDomains;\n\n      return this.apiClient.callApi(\n        '/smtp/blockedDomains', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of blocked domains\n     * Get the list of blocked domains\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetBlockedDomains}\n     */\n    this.getBlockedDomains = function() {\n      return this.getBlockedDomainsWithHttpInfo()\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all your transactional email activity (unaggregated events)\n     * This endpoint will show the aggregated stats for past 30 days by default if `startDate` and `endDate` OR `days` is not passed. The date range can not exceed 90 days\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number limitation for the result returned (default to 2500)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'\n     * @param {String} opts.email Filter the report for a specific email addresses\n     * @param {module:model/String} opts.event Filter the report for a specific event type\n     * @param {String} opts.tags Filter the report for tags (serialized and urlencoded array)\n     * @param {String} opts.messageId Filter on a specific message id\n     * @param {Number} opts.templateId Filter on a specific template id\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEmailEventReport} and HTTP response\n     */\n    this.getEmailEventReportWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'days': opts['days'],\n        'email': opts['email'],\n        'event': opts['event'],\n        'tags': opts['tags'],\n        'messageId': opts['messageId'],\n        'templateId': opts['templateId'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetEmailEventReport;\n\n      return this.apiClient.callApi(\n        '/smtp/statistics/events', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all your transactional email activity (unaggregated events)\n     * This endpoint will show the aggregated stats for past 30 days by default if `startDate` and `endDate` OR `days` is not passed. The date range can not exceed 90 days\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number limitation for the result returned (default to 2500)\n     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'\n     * @param {String} opts.email Filter the report for a specific email addresses\n     * @param {module:model/String} opts.event Filter the report for a specific event type\n     * @param {String} opts.tags Filter the report for tags (serialized and urlencoded array)\n     * @param {String} opts.messageId Filter on a specific message id\n     * @param {Number} opts.templateId Filter on a specific template id\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEmailEventReport}\n     */\n    this.getEmailEventReport = function(opts) {\n      return this.getEmailEventReportWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Fetch scheduled emails by batchId\n     * Fetch scheduled batch of emails by batchId (Can retrieve data upto 30 days old)\n     * @param {String} batchId The batchId of scheduled emails batch (Should be a valid UUIDv4)\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.startDate Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older tha current date.\n     * @param {Date} opts.endDate Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @param {module:model/String} opts.status Filter the records by `status` of the scheduled email batch or message.\n     * @param {Number} opts.limit Number of documents returned per page (default to 100)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetScheduledEmailByBatchId} and HTTP response\n     */\n    this.getScheduledEmailByBatchIdWithHttpInfo = function(batchId, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'batchId' is set\n      if (batchId === undefined || batchId === null) {\n        throw new Error(\"Missing the required parameter 'batchId' when calling getScheduledEmailByBatchId\");\n      }\n\n\n      var pathParams = {\n        'batchId': batchId\n      };\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'sort': opts['sort'],\n        'status': opts['status'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetScheduledEmailByBatchId;\n\n      return this.apiClient.callApi(\n        '/smtp/emailStatus/{batchId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Fetch scheduled emails by batchId\n     * Fetch scheduled batch of emails by batchId (Can retrieve data upto 30 days old)\n     * @param {String} batchId The batchId of scheduled emails batch (Should be a valid UUIDv4)\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.startDate Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older tha current date.\n     * @param {Date} opts.endDate Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @param {module:model/String} opts.status Filter the records by `status` of the scheduled email batch or message.\n     * @param {Number} opts.limit Number of documents returned per page (default to 100)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetScheduledEmailByBatchId}\n     */\n    this.getScheduledEmailByBatchId = function(batchId, opts) {\n      return this.getScheduledEmailByBatchIdWithHttpInfo(batchId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Fetch scheduled email by messageId\n     * Fetch scheduled email by messageId (Can retrieve data upto 30 days old)\n     * @param {String} messageId The messageId of scheduled email\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older tha current date.\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetScheduledEmailByMessageId} and HTTP response\n     */\n    this.getScheduledEmailByMessageIdWithHttpInfo = function(messageId, opts) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'messageId' is set\n      if (messageId === undefined || messageId === null) {\n        throw new Error(\"Missing the required parameter 'messageId' when calling getScheduledEmailByMessageId\");\n      }\n\n\n      var pathParams = {\n        'messageId': messageId\n      };\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetScheduledEmailByMessageId;\n\n      return this.apiClient.callApi(\n        '/smtp/emailStatus/{messageId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Fetch scheduled email by messageId\n     * Fetch scheduled email by messageId (Can retrieve data upto 30 days old)\n     * @param {String} messageId The messageId of scheduled email\n     * @param {Object} opts Optional parameters\n     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older tha current date.\n     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetScheduledEmailByMessageId}\n     */\n    this.getScheduledEmailByMessageId = function(messageId, opts) {\n      return this.getScheduledEmailByMessageIdWithHttpInfo(messageId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get your transactional email activity aggregated per day\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents returned per page (default to 10)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'\n     * @param {String} opts.tag Tag of the emails\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetReports} and HTTP response\n     */\n    this.getSmtpReportWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'days': opts['days'],\n        'tag': opts['tag'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetReports;\n\n      return this.apiClient.callApi(\n        '/smtp/statistics/reports', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get your transactional email activity aggregated per day\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents returned per page (default to 10)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'\n     * @param {String} opts.tag Tag of the emails\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetReports}\n     */\n    this.getSmtpReport = function(opts) {\n      return this.getSmtpReportWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Returns the template information\n     * @param {Number} templateId id of the template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmtpTemplateOverview} and HTTP response\n     */\n    this.getSmtpTemplateWithHttpInfo = function(templateId) {\n      var postBody = null;\n\n      // verify the required parameter 'templateId' is set\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling getSmtpTemplate\");\n      }\n\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmtpTemplateOverview;\n\n      return this.apiClient.callApi(\n        '/smtp/templates/{templateId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Returns the template information\n     * @param {Number} templateId id of the template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmtpTemplateOverview}\n     */\n    this.getSmtpTemplate = function(templateId) {\n      return this.getSmtpTemplateWithHttpInfo(templateId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of email templates\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.templateStatus Filter on the status of the template. Active = true, inactive = false\n     * @param {Number} opts.limit Number of documents returned per page (default to 50)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmtpTemplates} and HTTP response\n     */\n    this.getSmtpTemplatesWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'templateStatus': opts['templateStatus'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmtpTemplates;\n\n      return this.apiClient.callApi(\n        '/smtp/templates', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of email templates\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.templateStatus Filter on the status of the template. Active = true, inactive = false\n     * @param {Number} opts.limit Number of documents returned per page (default to 50)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmtpTemplates}\n     */\n    this.getSmtpTemplates = function(opts) {\n      return this.getSmtpTemplatesWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of blocked or unsubscribed transactional contacts\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts\n     * @param {Number} opts.limit Number of documents returned per page (default to 50)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {Array.<String>} opts.senders Comma separated list of emails of the senders from which contacts are blocked or unsubscribed\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransacBlockedContacts} and HTTP response\n     */\n    this.getTransacBlockedContactsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n        'senders': {\n          value: opts['senders'],\n          collectionFormat: 'csv'\n        },\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetTransacBlockedContacts;\n\n      return this.apiClient.callApi(\n        '/smtp/blockedContacts', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of blocked or unsubscribed transactional contacts\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts\n     * @param {Number} opts.limit Number of documents returned per page (default to 50)\n     * @param {Number} opts.offset Index of the first document on the page (default to 0)\n     * @param {Array.<String>} opts.senders Comma separated list of emails of the senders from which contacts are blocked or unsubscribed\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransacBlockedContacts}\n     */\n    this.getTransacBlockedContacts = function(opts) {\n      return this.getTransacBlockedContactsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the personalized content of a sent transactional email\n     * @param {String} uuid Unique id of the transactional email that has been sent to a particular contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransacEmailContent} and HTTP response\n     */\n    this.getTransacEmailContentWithHttpInfo = function(uuid) {\n      var postBody = null;\n\n      // verify the required parameter 'uuid' is set\n      if (uuid === undefined || uuid === null) {\n        throw new Error(\"Missing the required parameter 'uuid' when calling getTransacEmailContent\");\n      }\n\n\n      var pathParams = {\n        'uuid': uuid\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetTransacEmailContent;\n\n      return this.apiClient.callApi(\n        '/smtp/emails/{uuid}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the personalized content of a sent transactional email\n     * @param {String} uuid Unique id of the transactional email that has been sent to a particular contact\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransacEmailContent}\n     */\n    this.getTransacEmailContent = function(uuid) {\n      return this.getTransacEmailContentWithHttpInfo(uuid)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get the list of transactional emails on the basis of allowed filters\n     * This endpoint will show the list of emails for past 30 days by default. To retrieve emails before that time, please pass startDate and endDate in query filters.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.email Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.\n     * @param {Number} opts.templateId Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.\n     * @param {String} opts.messageId Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @param {Number} opts.limit Number of documents returned per page (default to 500)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransacEmailsList} and HTTP response\n     */\n    this.getTransacEmailsListWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'email': opts['email'],\n        'templateId': opts['templateId'],\n        'messageId': opts['messageId'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'sort': opts['sort'],\n        'limit': opts['limit'],\n        'offset': opts['offset'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetTransacEmailsList;\n\n      return this.apiClient.callApi(\n        '/smtp/emails', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get the list of transactional emails on the basis of allowed filters\n     * This endpoint will show the list of emails for past 30 days by default. To retrieve emails before that time, please pass startDate and endDate in query filters.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.email Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.\n     * @param {Number} opts.templateId Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.\n     * @param {String} opts.messageId Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @param {Number} opts.limit Number of documents returned per page (default to 500)\n     * @param {Number} opts.offset Index of the first document in the page (default to 0)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransacEmailsList}\n     */\n    this.getTransacEmailsList = function(opts) {\n      return this.getTransacEmailsListWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send a template to your test list\n     * @param {Number} templateId Id of the template\n     * @param {module:model/SendTestEmail} sendTestEmail \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.sendTestTemplateWithHttpInfo = function(templateId, sendTestEmail) {\n      var postBody = sendTestEmail;\n\n      // verify the required parameter 'templateId' is set\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling sendTestTemplate\");\n      }\n\n      // verify the required parameter 'sendTestEmail' is set\n      if (sendTestEmail === undefined || sendTestEmail === null) {\n        throw new Error(\"Missing the required parameter 'sendTestEmail' when calling sendTestTemplate\");\n      }\n\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/templates/{templateId}/sendTest', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send a template to your test list\n     * @param {Number} templateId Id of the template\n     * @param {module:model/SendTestEmail} sendTestEmail \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.sendTestTemplate = function(templateId, sendTestEmail) {\n      return this.sendTestTemplateWithHttpInfo(templateId, sendTestEmail)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send a transactional email\n     * @param {module:model/SendSmtpEmail} sendSmtpEmail Values to send a transactional email\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSmtpEmail} and HTTP response\n     */\n    this.sendTransacEmailWithHttpInfo = function(sendSmtpEmail) {\n      var postBody = sendSmtpEmail;\n\n      // verify the required parameter 'sendSmtpEmail' is set\n      if (sendSmtpEmail === undefined || sendSmtpEmail === null) {\n        throw new Error(\"Missing the required parameter 'sendSmtpEmail' when calling sendTransacEmail\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateSmtpEmail;\n\n      return this.apiClient.callApi(\n        '/smtp/email', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send a transactional email\n     * @param {module:model/SendSmtpEmail} sendSmtpEmail Values to send a transactional email\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSmtpEmail}\n     */\n    this.sendTransacEmail = function(sendSmtpEmail) {\n      return this.sendTransacEmailWithHttpInfo(sendSmtpEmail)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Unblock or resubscribe a transactional contact\n     * @param {String} email contact email (urlencoded) to unblock.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.smtpBlockedContactsEmailDeleteWithHttpInfo = function(email) {\n      var postBody = null;\n\n      // verify the required parameter 'email' is set\n      if (email === undefined || email === null) {\n        throw new Error(\"Missing the required parameter 'email' when calling smtpBlockedContactsEmailDelete\");\n      }\n\n\n      var pathParams = {\n        'email': email\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/blockedContacts/{email}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Unblock or resubscribe a transactional contact\n     * @param {String} email contact email (urlencoded) to unblock.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.smtpBlockedContactsEmailDelete = function(email) {\n      return this.smtpBlockedContactsEmailDeleteWithHttpInfo(email)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete an SMTP transactional log\n     * @param {String} messageId MessageId of the transactional log to delete\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.smtpLogMessageIdDeleteWithHttpInfo = function(messageId) {\n      var postBody = null;\n\n      // verify the required parameter 'messageId' is set\n      if (messageId === undefined || messageId === null) {\n        throw new Error(\"Missing the required parameter 'messageId' when calling smtpLogMessageIdDelete\");\n      }\n\n\n      var pathParams = {\n        'messageId': messageId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/log/{messageId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete an SMTP transactional log\n     * @param {String} messageId MessageId of the transactional log to delete\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.smtpLogMessageIdDelete = function(messageId) {\n      return this.smtpLogMessageIdDeleteWithHttpInfo(messageId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update an email template\n     * @param {Number} templateId id of the template\n     * @param {module:model/UpdateSmtpTemplate} smtpTemplate values to update in transactional email template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateSmtpTemplateWithHttpInfo = function(templateId, smtpTemplate) {\n      var postBody = smtpTemplate;\n\n      // verify the required parameter 'templateId' is set\n      if (templateId === undefined || templateId === null) {\n        throw new Error(\"Missing the required parameter 'templateId' when calling updateSmtpTemplate\");\n      }\n\n      // verify the required parameter 'smtpTemplate' is set\n      if (smtpTemplate === undefined || smtpTemplate === null) {\n        throw new Error(\"Missing the required parameter 'smtpTemplate' when calling updateSmtpTemplate\");\n      }\n\n\n      var pathParams = {\n        'templateId': templateId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/smtp/templates/{templateId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update an email template\n     * @param {Number} templateId id of the template\n     * @param {module:model/UpdateSmtpTemplate} smtpTemplate values to update in transactional email template\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateSmtpTemplate = function(templateId, smtpTemplate) {\n      return this.updateSmtpTemplateWithHttpInfo(templateId, smtpTemplate)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcC,GAEA,CAAA,SAAS,IAAI,EAAE,OAAO;IACrB,IAAI,OAAO,WAAW,cAAc,OAAO,GAAG,EAAE;QAC9C,wCAAwC;QACxC,wDAAgnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAClnB,OAAO,IAAI,+CAAkB,YAAY,OAAO,OAAO,EAAE;QACvD,qEAAqE;QACrE,OAAO,OAAO,GAAG;IACnB,OAAO;QACL,mCAAmC;QACnC,IAAI,CAAC,KAAK,WAAW,EAAE;YACrB,KAAK,WAAW,GAAG,CAAC;QACtB;QACA,KAAK,WAAW,CAAC,sBAAsB,GAAG,QAAQ,KAAK,WAAW,CAAC,SAAS,EAAE,KAAK,WAAW,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,eAAe,EAAE,KAAK,WAAW,CAAC,kBAAkB,EAAE,KAAK,WAAW,CAAC,iBAAiB,EAAE,KAAK,WAAW,CAAC,UAAU,EAAE,KAAK,WAAW,CAAC,mBAAmB,EAAE,KAAK,WAAW,CAAC,iBAAiB,EAAE,KAAK,WAAW,CAAC,mBAAmB,EAAE,KAAK,WAAW,CAAC,UAAU,EAAE,KAAK,WAAW,CAAC,0BAA0B,EAAE,KAAK,WAAW,CAAC,4BAA4B,EAAE,KAAK,WAAW,CAAC,uBAAuB,EAAE,KAAK,WAAW,CAAC,gBAAgB,EAAE,KAAK,WAAW,CAAC,yBAAyB,EAAE,KAAK,WAAW,CAAC,sBAAsB,EAAE,KAAK,WAAW,CAAC,oBAAoB,EAAE,KAAK,WAAW,CAAC,cAAc,EAAE,KAAK,WAAW,CAAC,iBAAiB,EAAE,KAAK,WAAW,CAAC,aAAa,EAAE,KAAK,WAAW,CAAC,aAAa,EAAE,KAAK,WAAW,CAAC,kBAAkB;IAC92B;AACF,CAAA,EAAE,IAAI,EAAE,SAAS,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,eAAe,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,UAAU,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,UAAU,EAAE,0BAA0B,EAAE,4BAA4B,EAAE,uBAAuB,EAAE,gBAAgB,EAAE,yBAAyB,EAAE,sBAAsB,EAAE,oBAAoB,EAAE,cAAc,EAAE,iBAAiB,EAAE,aAAa,EAAE,aAAa,EAAE,kBAAkB;IAClc;IAEA;;;;GAIC,GAED;;;;;;GAMC,GACD,IAAI,UAAU,SAAS,SAAS;QAC9B,IAAI,CAAC,SAAS,GAAG,aAAa,UAAU,QAAQ;QAIhD;;;;;KAKC,GACD,IAAI,CAAC,0BAA0B,GAAG,SAAS,WAAW;YACpD,IAAI,WAAW;YAEf,qDAAqD;YACrD,IAAI,gBAAgB,aAAa,gBAAgB,MAAM;gBACrD,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa,CACjB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,wBAAwB,QACxB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;KAKC,GACD,IAAI,CAAC,cAAc,GAAG,SAAS,WAAW;YACxC,OAAO,IAAI,CAAC,0BAA0B,CAAC,aACpC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,8BAA8B,GAAG,SAAS,YAAY;YACzD,IAAI,WAAW;YAEf,sDAAsD;YACtD,IAAI,iBAAiB,aAAa,iBAAiB,MAAM;gBACvD,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa,CACjB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,mBAAmB,QACnB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,kBAAkB,GAAG,SAAS,YAAY;YAC7C,OAAO,IAAI,CAAC,8BAA8B,CAAC,cACxC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;KAKC,GACD,IAAI,CAAC,+BAA+B,GAAG,SAAS,MAAM;YACpD,IAAI,WAAW;YAEf,gDAAgD;YAChD,IAAI,WAAW,aAAa,WAAW,MAAM;gBAC3C,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,UAAU;YACZ;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,iCAAiC,UACjC,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;KAKC,GACD,IAAI,CAAC,mBAAmB,GAAG,SAAS,MAAM;YACxC,OAAO,IAAI,CAAC,+BAA+B,CAAC,QACzC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;KAMC,GACD,IAAI,CAAC,6BAA6B,GAAG,SAAS,IAAI;YAChD,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW,IAAI,CAAC,oBAAoB;YAGxC,IAAI,aAAa,CACjB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,2BAA2B,QAC3B,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;KAMC,GACD,IAAI,CAAC,iBAAiB,GAAG,SAAS,IAAI;YACpC,OAAO,IAAI,CAAC,6BAA6B,CAAC,MACvC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;KAKC,GACD,IAAI,CAAC,oCAAoC,GAAG,SAAS,UAAU;YAC7D,IAAI,WAAW;YAEf,oDAAoD;YACpD,IAAI,eAAe,aAAa,eAAe,MAAM;gBACnD,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,cAAc;YAChB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,4BAA4B,UAC5B,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;KAKC,GACD,IAAI,CAAC,wBAAwB,GAAG,SAAS,UAAU;YACjD,OAAO,IAAI,CAAC,oCAAoC,CAAC,YAC9C,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,8BAA8B,GAAG,SAAS,UAAU;YACvD,IAAI,WAAW;YAEf,oDAAoD;YACpD,IAAI,eAAe,aAAa,eAAe,MAAM;gBACnD,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,cAAc;YAChB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,gCAAgC,UAChC,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,kBAAkB,GAAG,SAAS,UAAU;YAC3C,OAAO,IAAI,CAAC,8BAA8B,CAAC,YACxC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;;;;KASC,GACD,IAAI,CAAC,mCAAmC,GAAG,SAAS,IAAI;YACtD,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc;gBAChB,aAAa,IAAI,CAAC,YAAY;gBAC9B,WAAW,IAAI,CAAC,UAAU;gBAC1B,QAAQ,IAAI,CAAC,OAAO;gBACpB,OAAO,IAAI,CAAC,MAAM;YACpB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,qCAAqC,OACrC,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;;;;KASC,GACD,IAAI,CAAC,uBAAuB,GAAG,SAAS,IAAI;YAC1C,OAAO,IAAI,CAAC,mCAAmC,CAAC,MAC7C,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,6BAA6B,GAAG;YACnC,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,wBAAwB,OACxB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,iBAAiB,GAAG;YACvB,OAAO,IAAI,CAAC,6BAA6B,GACtC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;;;;;;;;;;;KAgBC,GACD,IAAI,CAAC,+BAA+B,GAAG,SAAS,IAAI;YAClD,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc;gBAChB,SAAS,IAAI,CAAC,QAAQ;gBACtB,UAAU,IAAI,CAAC,SAAS;gBACxB,aAAa,IAAI,CAAC,YAAY;gBAC9B,WAAW,IAAI,CAAC,UAAU;gBAC1B,QAAQ,IAAI,CAAC,OAAO;gBACpB,SAAS,IAAI,CAAC,QAAQ;gBACtB,SAAS,IAAI,CAAC,QAAQ;gBACtB,QAAQ,IAAI,CAAC,OAAO;gBACpB,aAAa,IAAI,CAAC,YAAY;gBAC9B,cAAc,IAAI,CAAC,aAAa;gBAChC,QAAQ,IAAI,CAAC,OAAO;YACtB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,2BAA2B,OAC3B,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;;;;;;;;;;;KAgBC,GACD,IAAI,CAAC,mBAAmB,GAAG,SAAS,IAAI;YACtC,OAAO,IAAI,CAAC,+BAA+B,CAAC,MACzC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;;;;;;;KAYC,GACD,IAAI,CAAC,sCAAsC,GAAG,SAAS,OAAO,EAAE,IAAI;YAClE,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW;YAEf,iDAAiD;YACjD,IAAI,YAAY,aAAa,YAAY,MAAM;gBAC7C,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,WAAW;YACb;YACA,IAAI,cAAc;gBAChB,aAAa,IAAI,CAAC,YAAY;gBAC9B,WAAW,IAAI,CAAC,UAAU;gBAC1B,QAAQ,IAAI,CAAC,OAAO;gBACpB,UAAU,IAAI,CAAC,SAAS;gBACxB,SAAS,IAAI,CAAC,QAAQ;gBACtB,UAAU,IAAI,CAAC,SAAS;YAC1B;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,+BAA+B,OAC/B,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;;;;;;;KAYC,GACD,IAAI,CAAC,0BAA0B,GAAG,SAAS,OAAO,EAAE,IAAI;YACtD,OAAO,IAAI,CAAC,sCAAsC,CAAC,SAAS,MACzD,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;;;KAQC,GACD,IAAI,CAAC,wCAAwC,GAAG,SAAS,SAAS,EAAE,IAAI;YACtE,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW;YAEf,mDAAmD;YACnD,IAAI,cAAc,aAAa,cAAc,MAAM;gBACjD,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,aAAa;YACf;YACA,IAAI,cAAc;gBAChB,aAAa,IAAI,CAAC,YAAY;gBAC9B,WAAW,IAAI,CAAC,UAAU;YAC5B;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,iCAAiC,OACjC,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;;;KAQC,GACD,IAAI,CAAC,4BAA4B,GAAG,SAAS,SAAS,EAAE,IAAI;YAC1D,OAAO,IAAI,CAAC,wCAAwC,CAAC,WAAW,MAC7D,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;;;;;;KAWC,GACD,IAAI,CAAC,yBAAyB,GAAG,SAAS,IAAI;YAC5C,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc;gBAChB,SAAS,IAAI,CAAC,QAAQ;gBACtB,UAAU,IAAI,CAAC,SAAS;gBACxB,aAAa,IAAI,CAAC,YAAY;gBAC9B,WAAW,IAAI,CAAC,UAAU;gBAC1B,QAAQ,IAAI,CAAC,OAAO;gBACpB,OAAO,IAAI,CAAC,MAAM;gBAClB,QAAQ,IAAI,CAAC,OAAO;YACtB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,4BAA4B,OAC5B,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;;;;;;KAWC,GACD,IAAI,CAAC,aAAa,GAAG,SAAS,IAAI;YAChC,OAAO,IAAI,CAAC,yBAAyB,CAAC,MACnC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,2BAA2B,GAAG,SAAS,UAAU;YACpD,IAAI,WAAW;YAEf,oDAAoD;YACpD,IAAI,eAAe,aAAa,eAAe,MAAM;gBACnD,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,cAAc;YAChB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,gCAAgC,OAChC,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,eAAe,GAAG,SAAS,UAAU;YACxC,OAAO,IAAI,CAAC,2BAA2B,CAAC,YACrC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;;;KAQC,GACD,IAAI,CAAC,4BAA4B,GAAG,SAAS,IAAI;YAC/C,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc;gBAChB,kBAAkB,IAAI,CAAC,iBAAiB;gBACxC,SAAS,IAAI,CAAC,QAAQ;gBACtB,UAAU,IAAI,CAAC,SAAS;gBACxB,QAAQ,IAAI,CAAC,OAAO;YACtB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,mBAAmB,OACnB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;;;KAQC,GACD,IAAI,CAAC,gBAAgB,GAAG,SAAS,IAAI;YACnC,OAAO,IAAI,CAAC,4BAA4B,CAAC,MACtC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;;;;;KAUC,GACD,IAAI,CAAC,qCAAqC,GAAG,SAAS,IAAI;YACxD,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc;gBAChB,aAAa,IAAI,CAAC,YAAY;gBAC9B,WAAW,IAAI,CAAC,UAAU;gBAC1B,SAAS,IAAI,CAAC,QAAQ;gBACtB,UAAU,IAAI,CAAC,SAAS;gBACxB,QAAQ,IAAI,CAAC,OAAO;YACtB;YACA,IAAI,wBAAwB;gBAC1B,WAAW;oBACT,OAAO,IAAI,CAAC,UAAU;oBACtB,kBAAkB;gBACpB;YACF;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,yBAAyB,OACzB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;;;;;KAUC,GACD,IAAI,CAAC,yBAAyB,GAAG,SAAS,IAAI;YAC5C,OAAO,IAAI,CAAC,qCAAqC,CAAC,MAC/C,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,kCAAkC,GAAG,SAAS,IAAI;YACrD,IAAI,WAAW;YAEf,8CAA8C;YAC9C,IAAI,SAAS,aAAa,SAAS,MAAM;gBACvC,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,QAAQ;YACV;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,uBAAuB,OACvB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,sBAAsB,GAAG,SAAS,IAAI;YACzC,OAAO,IAAI,CAAC,kCAAkC,CAAC,MAC5C,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;;;;;;;;;KAaC,GACD,IAAI,CAAC,gCAAgC,GAAG,SAAS,IAAI;YACnD,OAAO,QAAQ,CAAC;YAChB,IAAI,WAAW;YAGf,IAAI,aAAa,CACjB;YACA,IAAI,cAAc;gBAChB,SAAS,IAAI,CAAC,QAAQ;gBACtB,cAAc,IAAI,CAAC,aAAa;gBAChC,aAAa,IAAI,CAAC,YAAY;gBAC9B,aAAa,IAAI,CAAC,YAAY;gBAC9B,WAAW,IAAI,CAAC,UAAU;gBAC1B,QAAQ,IAAI,CAAC,OAAO;gBACpB,SAAS,IAAI,CAAC,QAAQ;gBACtB,UAAU,IAAI,CAAC,SAAS;YAC1B;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,gBAAgB,OAChB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;;;;;;;;;KAaC,GACD,IAAI,CAAC,oBAAoB,GAAG,SAAS,IAAI;YACvC,OAAO,IAAI,CAAC,gCAAgC,CAAC,MAC1C,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;KAKC,GACD,IAAI,CAAC,4BAA4B,GAAG,SAAS,UAAU,EAAE,aAAa;YACpE,IAAI,WAAW;YAEf,oDAAoD;YACpD,IAAI,eAAe,aAAa,eAAe,MAAM;gBACnD,MAAM,IAAI,MAAM;YAClB;YAEA,uDAAuD;YACvD,IAAI,kBAAkB,aAAa,kBAAkB,MAAM;gBACzD,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,cAAc;YAChB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,yCAAyC,QACzC,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;KAKC,GACD,IAAI,CAAC,gBAAgB,GAAG,SAAS,UAAU,EAAE,aAAa;YACxD,OAAO,IAAI,CAAC,4BAA4B,CAAC,YAAY,eAClD,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,4BAA4B,GAAG,SAAS,aAAa;YACxD,IAAI,WAAW;YAEf,uDAAuD;YACvD,IAAI,kBAAkB,aAAa,kBAAkB,MAAM;gBACzD,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa,CACjB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,eAAe,QACf,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,gBAAgB,GAAG,SAAS,aAAa;YAC5C,OAAO,IAAI,CAAC,4BAA4B,CAAC,eACtC,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,0CAA0C,GAAG,SAAS,KAAK;YAC9D,IAAI,WAAW;YAEf,+CAA+C;YAC/C,IAAI,UAAU,aAAa,UAAU,MAAM;gBACzC,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,SAAS;YACX;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,iCAAiC,UACjC,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,8BAA8B,GAAG,SAAS,KAAK;YAClD,OAAO,IAAI,CAAC,0CAA0C,CAAC,OACpD,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;KAIC,GACD,IAAI,CAAC,kCAAkC,GAAG,SAAS,SAAS;YAC1D,IAAI,WAAW;YAEf,mDAAmD;YACnD,IAAI,cAAc,aAAa,cAAc,MAAM;gBACjD,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,aAAa;YACf;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,yBAAyB,UACzB,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;KAIC,GACD,IAAI,CAAC,sBAAsB,GAAG,SAAS,SAAS;YAC9C,OAAO,IAAI,CAAC,kCAAkC,CAAC,WAC5C,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;QAGA;;;;;KAKC,GACD,IAAI,CAAC,8BAA8B,GAAG,SAAS,UAAU,EAAE,YAAY;YACrE,IAAI,WAAW;YAEf,oDAAoD;YACpD,IAAI,eAAe,aAAa,eAAe,MAAM;gBACnD,MAAM,IAAI,MAAM;YAClB;YAEA,sDAAsD;YACtD,IAAI,iBAAiB,aAAa,iBAAiB,MAAM;gBACvD,MAAM,IAAI,MAAM;YAClB;YAGA,IAAI,aAAa;gBACf,cAAc;YAChB;YACA,IAAI,cAAc,CAClB;YACA,IAAI,wBAAwB,CAC5B;YACA,IAAI,eAAe,CACnB;YACA,IAAI,aAAa,CACjB;YAEA,IAAI,YAAY;gBAAC;gBAAW;aAAc;YAC1C,IAAI,eAAe;gBAAC;aAAmB;YACvC,IAAI,UAAU;gBAAC;aAAmB;YAClC,IAAI,aAAa;YAEjB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,gCAAgC,OAChC,YAAY,aAAa,uBAAuB,cAAc,YAAY,UAC1E,WAAW,cAAc,SAAS;QAEtC;QAEA;;;;;KAKC,GACD,IAAI,CAAC,kBAAkB,GAAG,SAAS,UAAU,EAAE,YAAY;YACzD,OAAO,IAAI,CAAC,8BAA8B,CAAC,YAAY,cACpD,IAAI,CAAC,SAAS,iBAAiB;gBAC9B,OAAO,kBAAkB,IAAI;YAC/B;QACJ;IACF;IAEA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 7840, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7845, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/TransactionalSMSApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/ErrorModel', 'model/GetSmsEventReport', 'model/GetTransacAggregatedSmsReport', 'model/GetTransacSmsReport', 'model/SendSms', 'model/SendTransacSms'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/GetSmsEventReport'), require('../model/GetTransacAggregatedSmsReport'), require('../model/GetTransacSmsReport'), require('../model/SendSms'), require('../model/SendTransacSms'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.TransactionalSMSApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetSmsEventReport, root.SibApiV3Sdk.GetTransacAggregatedSmsReport, root.SibApiV3Sdk.GetTransacSmsReport, root.SibApiV3Sdk.SendSms, root.SibApiV3Sdk.SendTransacSms);\n  }\n}(this, function(ApiClient, ErrorModel, GetSmsEventReport, GetTransacAggregatedSmsReport, GetTransacSmsReport, SendSms, SendTransacSms) {\n  'use strict';\n\n  /**\n   * TransactionalSMS service.\n   * @module api/TransactionalSMSApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new TransactionalSMSApi. \n   * @alias module:api/TransactionalSMSApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Get all your SMS activity (unaggregated events)\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'\n     * @param {String} opts.phoneNumber Filter the report for a specific phone number\n     * @param {module:model/String} opts.event Filter the report for specific events\n     * @param {String} opts.tags Filter the report for specific tags passed as a serialized urlencoded array\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmsEventReport} and HTTP response\n     */\n    this.getSmsEventsWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'limit': opts['limit'],\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'offset': opts['offset'],\n        'days': opts['days'],\n        'phoneNumber': opts['phoneNumber'],\n        'event': opts['event'],\n        'tags': opts['tags'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetSmsEventReport;\n\n      return this.apiClient.callApi(\n        '/transactionalSMS/statistics/events', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all your SMS activity (unaggregated events)\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.limit Number of documents per page (default to 50)\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report\n     * @param {Number} opts.offset Index of the first document of the page (default to 0)\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'\n     * @param {String} opts.phoneNumber Filter the report for a specific phone number\n     * @param {module:model/String} opts.event Filter the report for specific events\n     * @param {String} opts.tags Filter the report for specific tags passed as a serialized urlencoded array\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmsEventReport}\n     */\n    this.getSmsEvents = function(opts) {\n      return this.getSmsEventsWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get your SMS activity aggregated over a period of time\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with startDate and endDate\n     * @param {String} opts.tag Filter on a tag\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransacAggregatedSmsReport} and HTTP response\n     */\n    this.getTransacAggregatedSmsReportWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'days': opts['days'],\n        'tag': opts['tag'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetTransacAggregatedSmsReport;\n\n      return this.apiClient.callApi(\n        '/transactionalSMS/statistics/aggregatedReport', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get your SMS activity aggregated over a period of time\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with startDate and endDate\n     * @param {String} opts.tag Filter on a tag\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransacAggregatedSmsReport}\n     */\n    this.getTransacAggregatedSmsReport = function(opts) {\n      return this.getTransacAggregatedSmsReportWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get your SMS activity aggregated per day\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'\n     * @param {String} opts.tag Filter on a tag\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransacSmsReport} and HTTP response\n     */\n    this.getTransacSmsReportWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'startDate': opts['startDate'],\n        'endDate': opts['endDate'],\n        'days': opts['days'],\n        'tag': opts['tag'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetTransacSmsReport;\n\n      return this.apiClient.callApi(\n        '/transactionalSMS/statistics/reports', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get your SMS activity aggregated per day\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report\n     * @param {String} opts.endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report\n     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'\n     * @param {String} opts.tag Filter on a tag\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransacSmsReport}\n     */\n    this.getTransacSmsReport = function(opts) {\n      return this.getTransacSmsReportWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Send SMS message to a mobile number\n     * @param {module:model/SendTransacSms} sendTransacSms Values to send a transactional SMS\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendSms} and HTTP response\n     */\n    this.sendTransacSmsWithHttpInfo = function(sendTransacSms) {\n      var postBody = sendTransacSms;\n\n      // verify the required parameter 'sendTransacSms' is set\n      if (sendTransacSms === undefined || sendTransacSms === null) {\n        throw new Error(\"Missing the required parameter 'sendTransacSms' when calling sendTransacSms\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = SendSms;\n\n      return this.apiClient.callApi(\n        '/transactionalSMS/sms', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Send SMS message to a mobile number\n     * @param {module:model/SendTransacSms} sendTransacSms Values to send a transactional SMS\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendSms}\n     */\n    this.sendTransacSms = function(sendTransacSms) {\n      return this.sendTransacSmsWithHttpInfo(sendTransacSms)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8114, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8119, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hrida/OneDrive/Desktop/Coding/Website%20projects/Portfolio%20Website%20Next.js%202025/portfolio-website-deepseek/my-portfolio/node_modules/sib-api-v3-sdk/src/api/WebhooksApi.js"],"sourcesContent":["/*\n * SendinBlue API\n * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | \n *\n * OpenAPI spec version: 3.0.0\n * Contact: contact@sendinblue.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.26\n *\n * Do not edit the class manually.\n *\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/CreateModel', 'model/CreateWebhook', 'model/ErrorModel', 'model/GetWebhook', 'model/GetWebhooks', 'model/UpdateWebhook'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/CreateModel'), require('../model/CreateWebhook'), require('../model/ErrorModel'), require('../model/GetWebhook'), require('../model/GetWebhooks'), require('../model/UpdateWebhook'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.SibApiV3Sdk) {\n      root.SibApiV3Sdk = {};\n    }\n    root.SibApiV3Sdk.WebhooksApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateWebhook, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetWebhook, root.SibApiV3Sdk.GetWebhooks, root.SibApiV3Sdk.UpdateWebhook);\n  }\n}(this, function(ApiClient, CreateModel, CreateWebhook, ErrorModel, GetWebhook, GetWebhooks, UpdateWebhook) {\n  'use strict';\n\n  /**\n   * Webhooks service.\n   * @module api/WebhooksApi\n   * @version 8.5.0\n   */\n\n  /**\n   * Constructs a new WebhooksApi. \n   * @alias module:api/WebhooksApi\n   * @class\n   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n\n    /**\n     * Create a webhook\n     * @param {module:model/CreateWebhook} createWebhook Values to create a webhook\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response\n     */\n    this.createWebhookWithHttpInfo = function(createWebhook) {\n      var postBody = createWebhook;\n\n      // verify the required parameter 'createWebhook' is set\n      if (createWebhook === undefined || createWebhook === null) {\n        throw new Error(\"Missing the required parameter 'createWebhook' when calling createWebhook\");\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = CreateModel;\n\n      return this.apiClient.callApi(\n        '/webhooks', 'POST',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Create a webhook\n     * @param {module:model/CreateWebhook} createWebhook Values to create a webhook\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}\n     */\n    this.createWebhook = function(createWebhook) {\n      return this.createWebhookWithHttpInfo(createWebhook)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a webhook\n     * @param {Number} webhookId Id of the webhook\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.deleteWebhookWithHttpInfo = function(webhookId) {\n      var postBody = null;\n\n      // verify the required parameter 'webhookId' is set\n      if (webhookId === undefined || webhookId === null) {\n        throw new Error(\"Missing the required parameter 'webhookId' when calling deleteWebhook\");\n      }\n\n\n      var pathParams = {\n        'webhookId': webhookId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/webhooks/{webhookId}', 'DELETE',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a webhook\n     * @param {Number} webhookId Id of the webhook\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.deleteWebhook = function(webhookId) {\n      return this.deleteWebhookWithHttpInfo(webhookId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a webhook details\n     * @param {Number} webhookId Id of the webhook\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWebhook} and HTTP response\n     */\n    this.getWebhookWithHttpInfo = function(webhookId) {\n      var postBody = null;\n\n      // verify the required parameter 'webhookId' is set\n      if (webhookId === undefined || webhookId === null) {\n        throw new Error(\"Missing the required parameter 'webhookId' when calling getWebhook\");\n      }\n\n\n      var pathParams = {\n        'webhookId': webhookId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetWebhook;\n\n      return this.apiClient.callApi(\n        '/webhooks/{webhookId}', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a webhook details\n     * @param {Number} webhookId Id of the webhook\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWebhook}\n     */\n    this.getWebhook = function(webhookId) {\n      return this.getWebhookWithHttpInfo(webhookId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get all webhooks\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.type Filter on webhook type (default to transactional)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of webhook creation (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWebhooks} and HTTP response\n     */\n    this.getWebhooksWithHttpInfo = function(opts) {\n      opts = opts || {};\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'type': opts['type'],\n        'sort': opts['sort'],\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = GetWebhooks;\n\n      return this.apiClient.callApi(\n        '/webhooks', 'GET',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get all webhooks\n     * @param {Object} opts Optional parameters\n     * @param {module:model/String} opts.type Filter on webhook type (default to transactional)\n     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of webhook creation (default to desc)\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWebhooks}\n     */\n    this.getWebhooks = function(opts) {\n      return this.getWebhooksWithHttpInfo(opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a webhook\n     * @param {Number} webhookId Id of the webhook\n     * @param {module:model/UpdateWebhook} updateWebhook Values to update a webhook\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n    this.updateWebhookWithHttpInfo = function(webhookId, updateWebhook) {\n      var postBody = updateWebhook;\n\n      // verify the required parameter 'webhookId' is set\n      if (webhookId === undefined || webhookId === null) {\n        throw new Error(\"Missing the required parameter 'webhookId' when calling updateWebhook\");\n      }\n\n      // verify the required parameter 'updateWebhook' is set\n      if (updateWebhook === undefined || updateWebhook === null) {\n        throw new Error(\"Missing the required parameter 'updateWebhook' when calling updateWebhook\");\n      }\n\n\n      var pathParams = {\n        'webhookId': webhookId\n      };\n      var queryParams = {\n      };\n      var collectionQueryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['api-key', 'partner-key'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/webhooks/{webhookId}', 'PUT',\n        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a webhook\n     * @param {Number} webhookId Id of the webhook\n     * @param {module:model/UpdateWebhook} updateWebhook Values to update a webhook\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n    this.updateWebhook = function(webhookId, updateWebhook) {\n      return this.updateWebhookWithHttpInfo(webhookId, updateWebhook)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n  };\n\n  return exports;\n}));\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8393, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}